// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Backend {
    // message fields
    pub rules: ::protobuf::RepeatedField<BackendRule>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Backend {
    pub fn new() -> Backend {
        ::std::default::Default::default()
    }

    // repeated .google.api.BackendRule rules = 1;

    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<BackendRule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<BackendRule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<BackendRule> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }

    pub fn get_rules(&self) -> &[BackendRule] {
        &self.rules
    }
}

impl ::protobuf::Message for Backend {
    fn is_initialized(&self) -> bool {
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rules {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Backend {
        Backend::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BackendRule>>(
                    "rules",
                    |m: &Backend| { &m.rules },
                    |m: &mut Backend| { &mut m.rules },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Backend>(
                    "Backend",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Backend {
        static mut instance: ::protobuf::lazy::Lazy<Backend> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Backend,
        };
        unsafe {
            instance.get(Backend::new)
        }
    }
}

impl ::protobuf::Clear for Backend {
    fn clear(&mut self) {
        self.clear_rules();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Backend {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Backend {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BackendRule {
    // message fields
    pub selector: ::std::string::String,
    pub address: ::std::string::String,
    pub deadline: f64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl BackendRule {
    pub fn new() -> BackendRule {
        ::std::default::Default::default()
    }

    // string selector = 1;

    pub fn clear_selector(&mut self) {
        self.selector.clear();
    }

    // Param is passed by value, moved
    pub fn set_selector(&mut self, v: ::std::string::String) {
        self.selector = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_selector(&mut self) -> &mut ::std::string::String {
        &mut self.selector
    }

    // Take field
    pub fn take_selector(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.selector, ::std::string::String::new())
    }

    pub fn get_selector(&self) -> &str {
        &self.selector
    }

    // string address = 2;

    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    pub fn get_address(&self) -> &str {
        &self.address
    }

    // double deadline = 3;

    pub fn clear_deadline(&mut self) {
        self.deadline = 0.;
    }

    // Param is passed by value, moved
    pub fn set_deadline(&mut self, v: f64) {
        self.deadline = v;
    }

    pub fn get_deadline(&self) -> f64 {
        self.deadline
    }
}

impl ::protobuf::Message for BackendRule {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.selector)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.deadline = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.selector.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.selector);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.address);
        }
        if self.deadline != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.selector.is_empty() {
            os.write_string(1, &self.selector)?;
        }
        if !self.address.is_empty() {
            os.write_string(2, &self.address)?;
        }
        if self.deadline != 0. {
            os.write_double(3, self.deadline)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BackendRule {
        BackendRule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "selector",
                    |m: &BackendRule| { &m.selector },
                    |m: &mut BackendRule| { &mut m.selector },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "address",
                    |m: &BackendRule| { &m.address },
                    |m: &mut BackendRule| { &mut m.address },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "deadline",
                    |m: &BackendRule| { &m.deadline },
                    |m: &mut BackendRule| { &mut m.deadline },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<BackendRule>(
                    "BackendRule",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static BackendRule {
        static mut instance: ::protobuf::lazy::Lazy<BackendRule> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const BackendRule,
        };
        unsafe {
            instance.get(BackendRule::new)
        }
    }
}

impl ::protobuf::Clear for BackendRule {
    fn clear(&mut self) {
        self.clear_selector();
        self.clear_address();
        self.clear_deadline();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BackendRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BackendRule {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18google/api/backend.proto\x12\ngoogle.api\"8\n\x07Backend\x12-\n\
    \x05rules\x18\x01\x20\x03(\x0b2\x17.google.api.BackendRuleR\x05rules\"_\
    \n\x0bBackendRule\x12\x1a\n\x08selector\x18\x01\x20\x01(\tR\x08selector\
    \x12\x18\n\x07address\x18\x02\x20\x01(\tR\x07address\x12\x1a\n\x08deadli\
    ne\x18\x03\x20\x01(\x01R\x08deadlineBn\n\x0ecom.google.apiB\x0cBackendPr\
    otoP\x01ZEgoogle.golang.org/genproto/googleapis/api/serviceconfig;servic\
    econfig\xa2\x02\x04GAPIJ\xe4\x0e\n\x06\x12\x04\x0e\0.\x01\n\xbd\x04\n\
    \x01\x0c\x12\x03\x0e\0\x122\xb2\x04\x20Copyright\x202017\x20Google\x20In\
    c.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202\
    .0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20fil\
    e\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20m\
    ay\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\
    \x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20requ\
    ired\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\
    \x20software\n\x20distributed\x20under\x20the\x20License\x20is\x20distri\
    buted\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\
    \x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\
    \x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20lan\
    guage\x20governing\x20permissions\x20and\n\x20limitations\x20under\x20th\
    e\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\x08\x12\n\x08\n\x01\x08\x12\
    \x03\x12\0\\\n\x0b\n\x04\x08\xe7\x07\0\x12\x03\x12\0\\\n\x0c\n\x05\x08\
    \xe7\x07\0\x02\x12\x03\x12\x07\x11\n\r\n\x06\x08\xe7\x07\0\x02\0\x12\x03\
    \x12\x07\x11\n\x0e\n\x07\x08\xe7\x07\0\x02\0\x01\x12\x03\x12\x07\x11\n\
    \x0c\n\x05\x08\xe7\x07\0\x07\x12\x03\x12\x14[\n\x08\n\x01\x08\x12\x03\
    \x13\0\"\n\x0b\n\x04\x08\xe7\x07\x01\x12\x03\x13\0\"\n\x0c\n\x05\x08\xe7\
    \x07\x01\x02\x12\x03\x13\x07\x1a\n\r\n\x06\x08\xe7\x07\x01\x02\0\x12\x03\
    \x13\x07\x1a\n\x0e\n\x07\x08\xe7\x07\x01\x02\0\x01\x12\x03\x13\x07\x1a\n\
    \x0c\n\x05\x08\xe7\x07\x01\x03\x12\x03\x13\x1d!\n\x08\n\x01\x08\x12\x03\
    \x14\0-\n\x0b\n\x04\x08\xe7\x07\x02\x12\x03\x14\0-\n\x0c\n\x05\x08\xe7\
    \x07\x02\x02\x12\x03\x14\x07\x1b\n\r\n\x06\x08\xe7\x07\x02\x02\0\x12\x03\
    \x14\x07\x1b\n\x0e\n\x07\x08\xe7\x07\x02\x02\0\x01\x12\x03\x14\x07\x1b\n\
    \x0c\n\x05\x08\xe7\x07\x02\x07\x12\x03\x14\x1e,\n\x08\n\x01\x08\x12\x03\
    \x15\0'\n\x0b\n\x04\x08\xe7\x07\x03\x12\x03\x15\0'\n\x0c\n\x05\x08\xe7\
    \x07\x03\x02\x12\x03\x15\x07\x13\n\r\n\x06\x08\xe7\x07\x03\x02\0\x12\x03\
    \x15\x07\x13\n\x0e\n\x07\x08\xe7\x07\x03\x02\0\x01\x12\x03\x15\x07\x13\n\
    \x0c\n\x05\x08\xe7\x07\x03\x07\x12\x03\x15\x16&\n\x08\n\x01\x08\x12\x03\
    \x16\0\"\n\x0b\n\x04\x08\xe7\x07\x04\x12\x03\x16\0\"\n\x0c\n\x05\x08\xe7\
    \x07\x04\x02\x12\x03\x16\x07\x18\n\r\n\x06\x08\xe7\x07\x04\x02\0\x12\x03\
    \x16\x07\x18\n\x0e\n\x07\x08\xe7\x07\x04\x02\0\x01\x12\x03\x16\x07\x18\n\
    \x0c\n\x05\x08\xe7\x07\x04\x07\x12\x03\x16\x1b!\nH\n\x02\x04\0\x12\x04\
    \x1a\0\x1f\x01\x1a<\x20`Backend`\x20defines\x20the\x20backend\x20configu\
    ration\x20for\x20a\x20service.\n\n\n\n\x03\x04\0\x01\x12\x03\x1a\x08\x0f\
    \n\x9b\x01\n\x04\x04\0\x02\0\x12\x03\x1e\x02!\x1a\x8d\x01\x20A\x20list\
    \x20of\x20API\x20backend\x20rules\x20that\x20apply\x20to\x20individual\
    \x20API\x20methods.\n\n\x20**NOTE:**\x20All\x20service\x20configuration\
    \x20rules\x20follow\x20\"last\x20one\x20wins\"\x20order.\n\n\x0c\n\x05\
    \x04\0\x02\0\x04\x12\x03\x1e\x02\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\
    \x1e\x0b\x16\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1e\x17\x1c\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x1e\x1f\x20\nR\n\x02\x04\x01\x12\x04\"\0.\x01\
    \x1aF\x20A\x20backend\x20rule\x20provides\x20configuration\x20for\x20an\
    \x20individual\x20API\x20element.\n\n\n\n\x03\x04\x01\x01\x12\x03\"\x08\
    \x13\n\x90\x01\n\x04\x04\x01\x02\0\x12\x03&\x02\x16\x1a\x82\x01\x20Selec\
    ts\x20the\x20methods\x20to\x20which\x20this\x20rule\x20applies.\n\n\x20R\
    efer\x20to\x20[selector][google.api.DocumentationRule.selector]\x20for\
    \x20syntax\x20details.\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04&\x02\"\x15\
    \n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03&\x02\x08\n\x0c\n\x05\x04\x01\x02\
    \0\x01\x12\x03&\t\x11\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03&\x14\x15\n.\
    \n\x04\x04\x01\x02\x01\x12\x03)\x02\x15\x1a!\x20The\x20address\x20of\x20\
    the\x20API\x20backend.\n\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04)\x02&\x16\
    \n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03)\x02\x08\n\x0c\n\x05\x04\x01\
    \x02\x01\x01\x12\x03)\t\x10\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03)\x13\
    \x14\n|\n\x04\x04\x01\x02\x02\x12\x03-\x02\x16\x1ao\x20The\x20number\x20\
    of\x20seconds\x20to\x20wait\x20for\x20a\x20response\x20from\x20a\x20requ\
    est.\x20\x20The\n\x20default\x20depends\x20on\x20the\x20deployment\x20co\
    ntext.\n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04-\x02)\x15\n\x0c\n\x05\x04\
    \x01\x02\x02\x05\x12\x03-\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\
    \x03-\t\x11\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03-\x14\x15b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
