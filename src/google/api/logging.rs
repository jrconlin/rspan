// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Logging {
    // message fields
    pub producer_destinations: ::protobuf::RepeatedField<Logging_LoggingDestination>,
    pub consumer_destinations: ::protobuf::RepeatedField<Logging_LoggingDestination>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Logging {
    pub fn new() -> Logging {
        ::std::default::Default::default()
    }

    // repeated .google.api.Logging.LoggingDestination producer_destinations = 1;

    pub fn clear_producer_destinations(&mut self) {
        self.producer_destinations.clear();
    }

    // Param is passed by value, moved
    pub fn set_producer_destinations(&mut self, v: ::protobuf::RepeatedField<Logging_LoggingDestination>) {
        self.producer_destinations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_producer_destinations(&mut self) -> &mut ::protobuf::RepeatedField<Logging_LoggingDestination> {
        &mut self.producer_destinations
    }

    // Take field
    pub fn take_producer_destinations(&mut self) -> ::protobuf::RepeatedField<Logging_LoggingDestination> {
        ::std::mem::replace(&mut self.producer_destinations, ::protobuf::RepeatedField::new())
    }

    pub fn get_producer_destinations(&self) -> &[Logging_LoggingDestination] {
        &self.producer_destinations
    }

    // repeated .google.api.Logging.LoggingDestination consumer_destinations = 2;

    pub fn clear_consumer_destinations(&mut self) {
        self.consumer_destinations.clear();
    }

    // Param is passed by value, moved
    pub fn set_consumer_destinations(&mut self, v: ::protobuf::RepeatedField<Logging_LoggingDestination>) {
        self.consumer_destinations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_consumer_destinations(&mut self) -> &mut ::protobuf::RepeatedField<Logging_LoggingDestination> {
        &mut self.consumer_destinations
    }

    // Take field
    pub fn take_consumer_destinations(&mut self) -> ::protobuf::RepeatedField<Logging_LoggingDestination> {
        ::std::mem::replace(&mut self.consumer_destinations, ::protobuf::RepeatedField::new())
    }

    pub fn get_consumer_destinations(&self) -> &[Logging_LoggingDestination] {
        &self.consumer_destinations
    }
}

impl ::protobuf::Message for Logging {
    fn is_initialized(&self) -> bool {
        for v in &self.producer_destinations {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.consumer_destinations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.producer_destinations)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.consumer_destinations)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.producer_destinations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.consumer_destinations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.producer_destinations {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.consumer_destinations {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Logging {
        Logging::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Logging_LoggingDestination>>(
                    "producer_destinations",
                    |m: &Logging| { &m.producer_destinations },
                    |m: &mut Logging| { &mut m.producer_destinations },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Logging_LoggingDestination>>(
                    "consumer_destinations",
                    |m: &Logging| { &m.consumer_destinations },
                    |m: &mut Logging| { &mut m.consumer_destinations },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Logging>(
                    "Logging",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Logging {
        static mut instance: ::protobuf::lazy::Lazy<Logging> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Logging,
        };
        unsafe {
            instance.get(Logging::new)
        }
    }
}

impl ::protobuf::Clear for Logging {
    fn clear(&mut self) {
        self.clear_producer_destinations();
        self.clear_consumer_destinations();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Logging {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Logging {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Logging_LoggingDestination {
    // message fields
    pub monitored_resource: ::std::string::String,
    pub logs: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Logging_LoggingDestination {
    pub fn new() -> Logging_LoggingDestination {
        ::std::default::Default::default()
    }

    // string monitored_resource = 3;

    pub fn clear_monitored_resource(&mut self) {
        self.monitored_resource.clear();
    }

    // Param is passed by value, moved
    pub fn set_monitored_resource(&mut self, v: ::std::string::String) {
        self.monitored_resource = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_monitored_resource(&mut self) -> &mut ::std::string::String {
        &mut self.monitored_resource
    }

    // Take field
    pub fn take_monitored_resource(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.monitored_resource, ::std::string::String::new())
    }

    pub fn get_monitored_resource(&self) -> &str {
        &self.monitored_resource
    }

    // repeated string logs = 1;

    pub fn clear_logs(&mut self) {
        self.logs.clear();
    }

    // Param is passed by value, moved
    pub fn set_logs(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.logs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_logs(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.logs
    }

    // Take field
    pub fn take_logs(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.logs, ::protobuf::RepeatedField::new())
    }

    pub fn get_logs(&self) -> &[::std::string::String] {
        &self.logs
    }
}

impl ::protobuf::Message for Logging_LoggingDestination {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.monitored_resource)?;
                },
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.logs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.monitored_resource.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.monitored_resource);
        }
        for value in &self.logs {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.monitored_resource.is_empty() {
            os.write_string(3, &self.monitored_resource)?;
        }
        for v in &self.logs {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Logging_LoggingDestination {
        Logging_LoggingDestination::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "monitored_resource",
                    |m: &Logging_LoggingDestination| { &m.monitored_resource },
                    |m: &mut Logging_LoggingDestination| { &mut m.monitored_resource },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "logs",
                    |m: &Logging_LoggingDestination| { &m.logs },
                    |m: &mut Logging_LoggingDestination| { &mut m.logs },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Logging_LoggingDestination>(
                    "Logging_LoggingDestination",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Logging_LoggingDestination {
        static mut instance: ::protobuf::lazy::Lazy<Logging_LoggingDestination> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Logging_LoggingDestination,
        };
        unsafe {
            instance.get(Logging_LoggingDestination::new)
        }
    }
}

impl ::protobuf::Clear for Logging_LoggingDestination {
    fn clear(&mut self) {
        self.clear_monitored_resource();
        self.clear_logs();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Logging_LoggingDestination {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Logging_LoggingDestination {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18google/api/logging.proto\x12\ngoogle.api\x1a\x1cgoogle/api/annotat\
    ions.proto\"\x9c\x02\n\x07Logging\x12[\n\x15producer_destinations\x18\
    \x01\x20\x03(\x0b2&.google.api.Logging.LoggingDestinationR\x14producerDe\
    stinations\x12[\n\x15consumer_destinations\x18\x02\x20\x03(\x0b2&.google\
    .api.Logging.LoggingDestinationR\x14consumerDestinations\x1aW\n\x12Loggi\
    ngDestination\x12-\n\x12monitored_resource\x18\x03\x20\x01(\tR\x11monito\
    redResource\x12\x12\n\x04logs\x18\x01\x20\x03(\tR\x04logsBn\n\x0ecom.goo\
    gle.apiB\x0cLoggingProtoP\x01ZEgoogle.golang.org/genproto/googleapis/api\
    /serviceconfig;serviceconfig\xa2\x02\x04GAPIJ\xe7\x19\n\x06\x12\x04\x0e\
    \0R\x01\n\xbd\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb2\x04\x20Copyright\x202\
    017\x20Google\x20Inc.\n\n\x20Licensed\x20under\x20the\x20Apache\x20Licen\
    se,\x20Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\
    \x20use\x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20\
    License.\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\
    \x20at\n\n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\
    \n\n\x20Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\
    \x20to\x20in\x20writing,\x20software\n\x20distributed\x20under\x20the\
    \x20License\x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\
    \x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20e\
    ither\x20express\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20\
    the\x20specific\x20language\x20governing\x20permissions\x20and\n\x20limi\
    tations\x20under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\x08\
    \x12\n\t\n\x02\x03\0\x12\x03\x12\x07%\n\x08\n\x01\x08\x12\x03\x14\0\\\n\
    \x0b\n\x04\x08\xe7\x07\0\x12\x03\x14\0\\\n\x0c\n\x05\x08\xe7\x07\0\x02\
    \x12\x03\x14\x07\x11\n\r\n\x06\x08\xe7\x07\0\x02\0\x12\x03\x14\x07\x11\n\
    \x0e\n\x07\x08\xe7\x07\0\x02\0\x01\x12\x03\x14\x07\x11\n\x0c\n\x05\x08\
    \xe7\x07\0\x07\x12\x03\x14\x14[\n\x08\n\x01\x08\x12\x03\x15\0\"\n\x0b\n\
    \x04\x08\xe7\x07\x01\x12\x03\x15\0\"\n\x0c\n\x05\x08\xe7\x07\x01\x02\x12\
    \x03\x15\x07\x1a\n\r\n\x06\x08\xe7\x07\x01\x02\0\x12\x03\x15\x07\x1a\n\
    \x0e\n\x07\x08\xe7\x07\x01\x02\0\x01\x12\x03\x15\x07\x1a\n\x0c\n\x05\x08\
    \xe7\x07\x01\x03\x12\x03\x15\x1d!\n\x08\n\x01\x08\x12\x03\x16\0-\n\x0b\n\
    \x04\x08\xe7\x07\x02\x12\x03\x16\0-\n\x0c\n\x05\x08\xe7\x07\x02\x02\x12\
    \x03\x16\x07\x1b\n\r\n\x06\x08\xe7\x07\x02\x02\0\x12\x03\x16\x07\x1b\n\
    \x0e\n\x07\x08\xe7\x07\x02\x02\0\x01\x12\x03\x16\x07\x1b\n\x0c\n\x05\x08\
    \xe7\x07\x02\x07\x12\x03\x16\x1e,\n\x08\n\x01\x08\x12\x03\x17\0'\n\x0b\n\
    \x04\x08\xe7\x07\x03\x12\x03\x17\0'\n\x0c\n\x05\x08\xe7\x07\x03\x02\x12\
    \x03\x17\x07\x13\n\r\n\x06\x08\xe7\x07\x03\x02\0\x12\x03\x17\x07\x13\n\
    \x0e\n\x07\x08\xe7\x07\x03\x02\0\x01\x12\x03\x17\x07\x13\n\x0c\n\x05\x08\
    \xe7\x07\x03\x07\x12\x03\x17\x16&\n\x08\n\x01\x08\x12\x03\x18\0\"\n\x0b\
    \n\x04\x08\xe7\x07\x04\x12\x03\x18\0\"\n\x0c\n\x05\x08\xe7\x07\x04\x02\
    \x12\x03\x18\x07\x18\n\r\n\x06\x08\xe7\x07\x04\x02\0\x12\x03\x18\x07\x18\
    \n\x0e\n\x07\x08\xe7\x07\x04\x02\0\x01\x12\x03\x18\x07\x18\n\x0c\n\x05\
    \x08\xe7\x07\x04\x07\x12\x03\x18\x1b!\n\xda\x07\n\x02\x04\0\x12\x048\0R\
    \x01\x1a\xcd\x07\x20Logging\x20configuration\x20of\x20the\x20service.\n\
    \n\x20The\x20following\x20example\x20shows\x20how\x20to\x20configure\x20\
    logs\x20to\x20be\x20sent\x20to\x20the\n\x20producer\x20and\x20consumer\
    \x20projects.\x20In\x20the\x20example,\x20the\x20`activity_history`\n\
    \x20log\x20is\x20sent\x20to\x20both\x20the\x20producer\x20and\x20consume\
    r\x20projects,\x20whereas\x20the\n\x20`purchase_history`\x20log\x20is\
    \x20only\x20sent\x20to\x20the\x20producer\x20project.\n\n\x20\x20\x20\
    \x20\x20monitored_resources:\n\x20\x20\x20\x20\x20-\x20type:\x20library.\
    googleapis.com/branch\n\x20\x20\x20\x20\x20\x20\x20labels:\n\x20\x20\x20\
    \x20\x20\x20\x20-\x20key:\x20/city\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    description:\x20The\x20city\x20where\x20the\x20library\x20branch\x20is\
    \x20located\x20in.\n\x20\x20\x20\x20\x20\x20\x20-\x20key:\x20/name\n\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20description:\x20The\x20name\x20of\x20the\
    \x20branch.\n\x20\x20\x20\x20\x20logs:\n\x20\x20\x20\x20\x20-\x20name:\
    \x20activity_history\n\x20\x20\x20\x20\x20\x20\x20labels:\n\x20\x20\x20\
    \x20\x20\x20\x20-\x20key:\x20/customer_id\n\x20\x20\x20\x20\x20-\x20name\
    :\x20purchase_history\n\x20\x20\x20\x20\x20logging:\n\x20\x20\x20\x20\
    \x20\x20\x20producer_destinations:\n\x20\x20\x20\x20\x20\x20\x20-\x20mon\
    itored_resource:\x20library.googleapis.com/branch\n\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20logs:\n\x20\x20\x20\x20\x20\x20\x20\x20\x20-\x20activity\
    _history\n\x20\x20\x20\x20\x20\x20\x20\x20\x20-\x20purchase_history\n\
    \x20\x20\x20\x20\x20\x20\x20consumer_destinations:\n\x20\x20\x20\x20\x20\
    \x20\x20-\x20monitored_resource:\x20library.googleapis.com/branch\n\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20logs:\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20-\x20activity_history\n\n\n\n\x03\x04\0\x01\x12\x038\x08\x0f\np\n\
    \x04\x04\0\x03\0\x12\x04;\x02E\x03\x1ab\x20Configuration\x20of\x20a\x20s\
    pecific\x20logging\x20destination\x20(the\x20producer\x20project\n\x20or\
    \x20the\x20consumer\x20project).\n\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03;\
    \n\x1c\n\x9e\x01\n\x06\x04\0\x03\0\x02\0\x12\x03>\x04\"\x1a\x8e\x01\x20T\
    he\x20monitored\x20resource\x20type.\x20The\x20type\x20must\x20be\x20def\
    ined\x20in\x20the\n\x20[Service.monitored_resources][google.api.Service.\
    monitored_resources]\x20section.\n\n\x0f\n\x07\x04\0\x03\0\x02\0\x04\x12\
    \x04>\x04;\x1e\n\x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\x03>\x04\n\n\x0e\n\
    \x07\x04\0\x03\0\x02\0\x01\x12\x03>\x0b\x1d\n\x0e\n\x07\x04\0\x03\0\x02\
    \0\x03\x12\x03>\x20!\n\x8e\x02\n\x06\x04\0\x03\0\x02\x01\x12\x03D\x04\
    \x1d\x1a\xfe\x01\x20Names\x20of\x20the\x20logs\x20to\x20be\x20sent\x20to\
    \x20this\x20destination.\x20Each\x20name\x20must\n\x20be\x20defined\x20i\
    n\x20the\x20[Service.logs][google.api.Service.logs]\x20section.\x20If\
    \x20the\x20log\x20name\x20is\n\x20not\x20a\x20domain\x20scoped\x20name,\
    \x20it\x20will\x20be\x20automatically\x20prefixed\x20with\n\x20the\x20se\
    rvice\x20name\x20followed\x20by\x20\"/\".\n\n\x0e\n\x07\x04\0\x03\0\x02\
    \x01\x04\x12\x03D\x04\x0c\n\x0e\n\x07\x04\0\x03\0\x02\x01\x05\x12\x03D\r\
    \x13\n\x0e\n\x07\x04\0\x03\0\x02\x01\x01\x12\x03D\x14\x18\n\x0e\n\x07\
    \x04\0\x03\0\x02\x01\x03\x12\x03D\x1b\x1c\n\xef\x01\n\x04\x04\0\x02\0\
    \x12\x03K\x028\x1a\xe1\x01\x20Logging\x20configurations\x20for\x20sendin\
    g\x20logs\x20to\x20the\x20producer\x20project.\n\x20There\x20can\x20be\
    \x20multiple\x20producer\x20destinations,\x20each\x20one\x20must\x20have\
    \x20a\n\x20different\x20monitored\x20resource\x20type.\x20A\x20log\x20ca\
    n\x20be\x20used\x20in\x20at\x20most\n\x20one\x20producer\x20destination.\
    \n\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03K\x02\n\n\x0c\n\x05\x04\0\x02\0\
    \x06\x12\x03K\x0b\x1d\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03K\x1e3\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03K67\n\xef\x01\n\x04\x04\0\x02\x01\x12\x03Q\
    \x028\x1a\xe1\x01\x20Logging\x20configurations\x20for\x20sending\x20logs\
    \x20to\x20the\x20consumer\x20project.\n\x20There\x20can\x20be\x20multipl\
    e\x20consumer\x20destinations,\x20each\x20one\x20must\x20have\x20a\n\x20\
    different\x20monitored\x20resource\x20type.\x20A\x20log\x20can\x20be\x20\
    used\x20in\x20at\x20most\n\x20one\x20consumer\x20destination.\n\n\x0c\n\
    \x05\x04\0\x02\x01\x04\x12\x03Q\x02\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\
    \x03Q\x0b\x1d\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03Q\x1e3\n\x0c\n\x05\
    \x04\0\x02\x01\x03\x12\x03Q67b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
