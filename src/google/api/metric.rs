// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct MetricDescriptor {
    // message fields
    pub name: ::std::string::String,
    pub field_type: ::std::string::String,
    pub labels: ::protobuf::RepeatedField<super::label::LabelDescriptor>,
    pub metric_kind: MetricDescriptor_MetricKind,
    pub value_type: MetricDescriptor_ValueType,
    pub unit: ::std::string::String,
    pub description: ::std::string::String,
    pub display_name: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl MetricDescriptor {
    pub fn new() -> MetricDescriptor {
        ::std::default::Default::default()
    }

    // string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }

    // string type = 8;

    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }

    // repeated .google.api.LabelDescriptor labels = 2;

    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::protobuf::RepeatedField<super::label::LabelDescriptor>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::protobuf::RepeatedField<super::label::LabelDescriptor> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::protobuf::RepeatedField<super::label::LabelDescriptor> {
        ::std::mem::replace(&mut self.labels, ::protobuf::RepeatedField::new())
    }

    pub fn get_labels(&self) -> &[super::label::LabelDescriptor] {
        &self.labels
    }

    // .google.api.MetricDescriptor.MetricKind metric_kind = 3;

    pub fn clear_metric_kind(&mut self) {
        self.metric_kind = MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_metric_kind(&mut self, v: MetricDescriptor_MetricKind) {
        self.metric_kind = v;
    }

    pub fn get_metric_kind(&self) -> MetricDescriptor_MetricKind {
        self.metric_kind
    }

    // .google.api.MetricDescriptor.ValueType value_type = 4;

    pub fn clear_value_type(&mut self) {
        self.value_type = MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_value_type(&mut self, v: MetricDescriptor_ValueType) {
        self.value_type = v;
    }

    pub fn get_value_type(&self) -> MetricDescriptor_ValueType {
        self.value_type
    }

    // string unit = 5;

    pub fn clear_unit(&mut self) {
        self.unit.clear();
    }

    // Param is passed by value, moved
    pub fn set_unit(&mut self, v: ::std::string::String) {
        self.unit = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_unit(&mut self) -> &mut ::std::string::String {
        &mut self.unit
    }

    // Take field
    pub fn take_unit(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.unit, ::std::string::String::new())
    }

    pub fn get_unit(&self) -> &str {
        &self.unit
    }

    // string description = 6;

    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    pub fn get_description(&self) -> &str {
        &self.description
    }

    // string display_name = 7;

    pub fn clear_display_name(&mut self) {
        self.display_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_display_name(&mut self, v: ::std::string::String) {
        self.display_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_display_name(&mut self) -> &mut ::std::string::String {
        &mut self.display_name
    }

    // Take field
    pub fn take_display_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.display_name, ::std::string::String::new())
    }

    pub fn get_display_name(&self) -> &str {
        &self.display_name
    }
}

impl ::protobuf::Message for MetricDescriptor {
    fn is_initialized(&self) -> bool {
        for v in &self.labels {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.labels)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.metric_kind, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.value_type, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.unit)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.display_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.field_type);
        }
        for value in &self.labels {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.metric_kind != MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(3, self.metric_kind);
        }
        if self.value_type != MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(4, self.value_type);
        }
        if !self.unit.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.unit);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.description);
        }
        if !self.display_name.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.display_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(8, &self.field_type)?;
        }
        for v in &self.labels {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.metric_kind != MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED {
            os.write_enum(3, self.metric_kind.value())?;
        }
        if self.value_type != MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED {
            os.write_enum(4, self.value_type.value())?;
        }
        if !self.unit.is_empty() {
            os.write_string(5, &self.unit)?;
        }
        if !self.description.is_empty() {
            os.write_string(6, &self.description)?;
        }
        if !self.display_name.is_empty() {
            os.write_string(7, &self.display_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetricDescriptor {
        MetricDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &MetricDescriptor| { &m.name },
                    |m: &mut MetricDescriptor| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "type",
                    |m: &MetricDescriptor| { &m.field_type },
                    |m: &mut MetricDescriptor| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::label::LabelDescriptor>>(
                    "labels",
                    |m: &MetricDescriptor| { &m.labels },
                    |m: &mut MetricDescriptor| { &mut m.labels },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MetricDescriptor_MetricKind>>(
                    "metric_kind",
                    |m: &MetricDescriptor| { &m.metric_kind },
                    |m: &mut MetricDescriptor| { &mut m.metric_kind },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MetricDescriptor_ValueType>>(
                    "value_type",
                    |m: &MetricDescriptor| { &m.value_type },
                    |m: &mut MetricDescriptor| { &mut m.value_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "unit",
                    |m: &MetricDescriptor| { &m.unit },
                    |m: &mut MetricDescriptor| { &mut m.unit },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "description",
                    |m: &MetricDescriptor| { &m.description },
                    |m: &mut MetricDescriptor| { &mut m.description },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "display_name",
                    |m: &MetricDescriptor| { &m.display_name },
                    |m: &mut MetricDescriptor| { &mut m.display_name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MetricDescriptor>(
                    "MetricDescriptor",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MetricDescriptor {
        static mut instance: ::protobuf::lazy::Lazy<MetricDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MetricDescriptor,
        };
        unsafe {
            instance.get(MetricDescriptor::new)
        }
    }
}

impl ::protobuf::Clear for MetricDescriptor {
    fn clear(&mut self) {
        self.clear_name();
        self.clear_field_type();
        self.clear_labels();
        self.clear_metric_kind();
        self.clear_value_type();
        self.clear_unit();
        self.clear_description();
        self.clear_display_name();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetricDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MetricDescriptor_MetricKind {
    METRIC_KIND_UNSPECIFIED = 0,
    GAUGE = 1,
    DELTA = 2,
    CUMULATIVE = 3,
}

impl ::protobuf::ProtobufEnum for MetricDescriptor_MetricKind {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MetricDescriptor_MetricKind> {
        match value {
            0 => ::std::option::Option::Some(MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED),
            1 => ::std::option::Option::Some(MetricDescriptor_MetricKind::GAUGE),
            2 => ::std::option::Option::Some(MetricDescriptor_MetricKind::DELTA),
            3 => ::std::option::Option::Some(MetricDescriptor_MetricKind::CUMULATIVE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MetricDescriptor_MetricKind] = &[
            MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED,
            MetricDescriptor_MetricKind::GAUGE,
            MetricDescriptor_MetricKind::DELTA,
            MetricDescriptor_MetricKind::CUMULATIVE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("MetricDescriptor_MetricKind", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for MetricDescriptor_MetricKind {
}

impl ::std::default::Default for MetricDescriptor_MetricKind {
    fn default() -> Self {
        MetricDescriptor_MetricKind::METRIC_KIND_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricDescriptor_MetricKind {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MetricDescriptor_ValueType {
    VALUE_TYPE_UNSPECIFIED = 0,
    BOOL = 1,
    INT64 = 2,
    DOUBLE = 3,
    STRING = 4,
    DISTRIBUTION = 5,
    MONEY = 6,
}

impl ::protobuf::ProtobufEnum for MetricDescriptor_ValueType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MetricDescriptor_ValueType> {
        match value {
            0 => ::std::option::Option::Some(MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED),
            1 => ::std::option::Option::Some(MetricDescriptor_ValueType::BOOL),
            2 => ::std::option::Option::Some(MetricDescriptor_ValueType::INT64),
            3 => ::std::option::Option::Some(MetricDescriptor_ValueType::DOUBLE),
            4 => ::std::option::Option::Some(MetricDescriptor_ValueType::STRING),
            5 => ::std::option::Option::Some(MetricDescriptor_ValueType::DISTRIBUTION),
            6 => ::std::option::Option::Some(MetricDescriptor_ValueType::MONEY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MetricDescriptor_ValueType] = &[
            MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED,
            MetricDescriptor_ValueType::BOOL,
            MetricDescriptor_ValueType::INT64,
            MetricDescriptor_ValueType::DOUBLE,
            MetricDescriptor_ValueType::STRING,
            MetricDescriptor_ValueType::DISTRIBUTION,
            MetricDescriptor_ValueType::MONEY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("MetricDescriptor_ValueType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for MetricDescriptor_ValueType {
}

impl ::std::default::Default for MetricDescriptor_ValueType {
    fn default() -> Self {
        MetricDescriptor_ValueType::VALUE_TYPE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricDescriptor_ValueType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Metric {
    // message fields
    pub field_type: ::std::string::String,
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Metric {
    pub fn new() -> Metric {
        ::std::default::Default::default()
    }

    // string type = 3;

    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }

    // repeated .google.api.Metric.LabelsEntry labels = 2;

    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.labels, ::std::collections::HashMap::new())
    }

    pub fn get_labels(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.labels
    }
}

impl ::protobuf::Message for Metric {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.labels)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.field_type);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.labels);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.field_type.is_empty() {
            os.write_string(3, &self.field_type)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.labels, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Metric {
        Metric::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "type",
                    |m: &Metric| { &m.field_type },
                    |m: &mut Metric| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                    "labels",
                    |m: &Metric| { &m.labels },
                    |m: &mut Metric| { &mut m.labels },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Metric>(
                    "Metric",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Metric {
        static mut instance: ::protobuf::lazy::Lazy<Metric> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Metric,
        };
        unsafe {
            instance.get(Metric::new)
        }
    }
}

impl ::protobuf::Clear for Metric {
    fn clear(&mut self) {
        self.clear_field_type();
        self.clear_labels();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Metric {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metric {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17google/api/metric.proto\x12\ngoogle.api\x1a\x16google/api/label.pr\
    oto\"\x9d\x04\n\x10MetricDescriptor\x12\x12\n\x04name\x18\x01\x20\x01(\t\
    R\x04name\x12\x12\n\x04type\x18\x08\x20\x01(\tR\x04type\x123\n\x06labels\
    \x18\x02\x20\x03(\x0b2\x1b.google.api.LabelDescriptorR\x06labels\x12H\n\
    \x0bmetric_kind\x18\x03\x20\x01(\x0e2'.google.api.MetricDescriptor.Metri\
    cKindR\nmetricKind\x12E\n\nvalue_type\x18\x04\x20\x01(\x0e2&.google.api.\
    MetricDescriptor.ValueTypeR\tvalueType\x12\x12\n\x04unit\x18\x05\x20\x01\
    (\tR\x04unit\x12\x20\n\x0bdescription\x18\x06\x20\x01(\tR\x0bdescription\
    \x12!\n\x0cdisplay_name\x18\x07\x20\x01(\tR\x0bdisplayName\"O\n\nMetricK\
    ind\x12\x1b\n\x17METRIC_KIND_UNSPECIFIED\x10\0\x12\t\n\x05GAUGE\x10\x01\
    \x12\t\n\x05DELTA\x10\x02\x12\x0e\n\nCUMULATIVE\x10\x03\"q\n\tValueType\
    \x12\x1a\n\x16VALUE_TYPE_UNSPECIFIED\x10\0\x12\x08\n\x04BOOL\x10\x01\x12\
    \t\n\x05INT64\x10\x02\x12\n\n\x06DOUBLE\x10\x03\x12\n\n\x06STRING\x10\
    \x04\x12\x10\n\x0cDISTRIBUTION\x10\x05\x12\t\n\x05MONEY\x10\x06\"\x8f\
    \x01\n\x06Metric\x12\x12\n\x04type\x18\x03\x20\x01(\tR\x04type\x126\n\
    \x06labels\x18\x02\x20\x03(\x0b2\x1e.google.api.Metric.LabelsEntryR\x06l\
    abels\x1a9\n\x0bLabelsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\
    \x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01B_\n\x0ecom.go\
    ogle.apiB\x0bMetricProtoP\x01Z7google.golang.org/genproto/googleapis/api\
    /metric;metric\xa2\x02\x04GAPIJ\x9e9\n\x07\x12\x05\x0e\0\xc3\x01\x01\n\
    \xbd\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb2\x04\x20Copyright\x202017\x20Go\
    ogle\x20Inc.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Ve\
    rsion\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20t\
    his\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\
    \x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\
    \x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Un\
    less\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\
    \x20writing,\x20software\n\x20distributed\x20under\x20the\x20License\x20\
    is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20\
    WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20expres\
    s\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\
    \x20language\x20governing\x20permissions\x20and\n\x20limitations\x20unde\
    r\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\x08\x12\n\t\n\x02\x03\
    \0\x12\x03\x12\x07\x1f\n\x08\n\x01\x08\x12\x03\x14\0N\n\x0b\n\x04\x08\
    \xe7\x07\0\x12\x03\x14\0N\n\x0c\n\x05\x08\xe7\x07\0\x02\x12\x03\x14\x07\
    \x11\n\r\n\x06\x08\xe7\x07\0\x02\0\x12\x03\x14\x07\x11\n\x0e\n\x07\x08\
    \xe7\x07\0\x02\0\x01\x12\x03\x14\x07\x11\n\x0c\n\x05\x08\xe7\x07\0\x07\
    \x12\x03\x14\x14M\n\x08\n\x01\x08\x12\x03\x15\0\"\n\x0b\n\x04\x08\xe7\
    \x07\x01\x12\x03\x15\0\"\n\x0c\n\x05\x08\xe7\x07\x01\x02\x12\x03\x15\x07\
    \x1a\n\r\n\x06\x08\xe7\x07\x01\x02\0\x12\x03\x15\x07\x1a\n\x0e\n\x07\x08\
    \xe7\x07\x01\x02\0\x01\x12\x03\x15\x07\x1a\n\x0c\n\x05\x08\xe7\x07\x01\
    \x03\x12\x03\x15\x1d!\n\x08\n\x01\x08\x12\x03\x16\0,\n\x0b\n\x04\x08\xe7\
    \x07\x02\x12\x03\x16\0,\n\x0c\n\x05\x08\xe7\x07\x02\x02\x12\x03\x16\x07\
    \x1b\n\r\n\x06\x08\xe7\x07\x02\x02\0\x12\x03\x16\x07\x1b\n\x0e\n\x07\x08\
    \xe7\x07\x02\x02\0\x01\x12\x03\x16\x07\x1b\n\x0c\n\x05\x08\xe7\x07\x02\
    \x07\x12\x03\x16\x1e+\n\x08\n\x01\x08\x12\x03\x17\0'\n\x0b\n\x04\x08\xe7\
    \x07\x03\x12\x03\x17\0'\n\x0c\n\x05\x08\xe7\x07\x03\x02\x12\x03\x17\x07\
    \x13\n\r\n\x06\x08\xe7\x07\x03\x02\0\x12\x03\x17\x07\x13\n\x0e\n\x07\x08\
    \xe7\x07\x03\x02\0\x01\x12\x03\x17\x07\x13\n\x0c\n\x05\x08\xe7\x07\x03\
    \x07\x12\x03\x17\x16&\n\x08\n\x01\x08\x12\x03\x18\0\"\n\x0b\n\x04\x08\
    \xe7\x07\x04\x12\x03\x18\0\"\n\x0c\n\x05\x08\xe7\x07\x04\x02\x12\x03\x18\
    \x07\x18\n\r\n\x06\x08\xe7\x07\x04\x02\0\x12\x03\x18\x07\x18\n\x0e\n\x07\
    \x08\xe7\x07\x04\x02\0\x01\x12\x03\x18\x07\x18\n\x0c\n\x05\x08\xe7\x07\
    \x04\x07\x12\x03\x18\x1b!\n\xbe\x01\n\x02\x04\0\x12\x05\x1e\0\xb7\x01\
    \x01\x1a\xb0\x01\x20Defines\x20a\x20metric\x20type\x20and\x20its\x20sche\
    ma.\x20Once\x20a\x20metric\x20descriptor\x20is\x20created,\n\x20deleting\
    \x20or\x20altering\x20it\x20stops\x20data\x20collection\x20and\x20makes\
    \x20the\x20metric\x20type's\n\x20existing\x20data\x20unusable.\n\n\n\n\
    \x03\x04\0\x01\x12\x03\x1e\x08\x18\nO\n\x04\x04\0\x04\0\x12\x04\x20\x020\
    \x03\x1aA\x20The\x20kind\x20of\x20measurement.\x20It\x20describes\x20how\
    \x20the\x20data\x20is\x20reported.\n\n\x0c\n\x05\x04\0\x04\0\x01\x12\x03\
    \x20\x07\x11\n/\n\x06\x04\0\x04\0\x02\0\x12\x03\"\x04\x20\x1a\x20\x20Do\
    \x20not\x20use\x20this\x20default\x20value.\n\n\x0e\n\x07\x04\0\x04\0\
    \x02\0\x01\x12\x03\"\x04\x1b\n\x0e\n\x07\x04\0\x04\0\x02\0\x02\x12\x03\"\
    \x1e\x1f\n9\n\x06\x04\0\x04\0\x02\x01\x12\x03%\x04\x0e\x1a*\x20An\x20ins\
    tantaneous\x20measurement\x20of\x20a\x20value.\n\n\x0e\n\x07\x04\0\x04\0\
    \x02\x01\x01\x12\x03%\x04\t\n\x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\x03%\
    \x0c\r\n>\n\x06\x04\0\x04\0\x02\x02\x12\x03(\x04\x0e\x1a/\x20The\x20chan\
    ge\x20in\x20a\x20value\x20during\x20a\x20time\x20interval.\n\n\x0e\n\x07\
    \x04\0\x04\0\x02\x02\x01\x12\x03(\x04\t\n\x0e\n\x07\x04\0\x04\0\x02\x02\
    \x02\x12\x03(\x0c\r\n\x8a\x02\n\x06\x04\0\x04\0\x02\x03\x12\x03/\x04\x13\
    \x1a\xfa\x01\x20A\x20value\x20accumulated\x20over\x20a\x20time\x20interv\
    al.\x20\x20Cumulative\n\x20measurements\x20in\x20a\x20time\x20series\x20\
    should\x20have\x20the\x20same\x20start\x20time\n\x20and\x20increasing\
    \x20end\x20times,\x20until\x20an\x20event\x20resets\x20the\x20cumulative\
    \n\x20value\x20to\x20zero\x20and\x20sets\x20a\x20new\x20start\x20time\
    \x20for\x20the\x20following\n\x20points.\n\n\x0e\n\x07\x04\0\x04\0\x02\
    \x03\x01\x12\x03/\x04\x0e\n\x0e\n\x07\x04\0\x04\0\x02\x03\x02\x12\x03/\
    \x11\x12\n+\n\x04\x04\0\x04\x01\x12\x043\x02J\x03\x1a\x1d\x20The\x20valu\
    e\x20type\x20of\x20a\x20metric.\n\n\x0c\n\x05\x04\0\x04\x01\x01\x12\x033\
    \x07\x10\n/\n\x06\x04\0\x04\x01\x02\0\x12\x035\x04\x1f\x1a\x20\x20Do\x20\
    not\x20use\x20this\x20default\x20value.\n\n\x0e\n\x07\x04\0\x04\x01\x02\
    \0\x01\x12\x035\x04\x1a\n\x0e\n\x07\x04\0\x04\x01\x02\0\x02\x12\x035\x1d\
    \x1e\ni\n\x06\x04\0\x04\x01\x02\x01\x12\x039\x04\r\x1aZ\x20The\x20value\
    \x20is\x20a\x20boolean.\n\x20This\x20value\x20type\x20can\x20be\x20used\
    \x20only\x20if\x20the\x20metric\x20kind\x20is\x20`GAUGE`.\n\n\x0e\n\x07\
    \x04\0\x04\x01\x02\x01\x01\x12\x039\x04\x08\n\x0e\n\x07\x04\0\x04\x01\
    \x02\x01\x02\x12\x039\x0b\x0c\n6\n\x06\x04\0\x04\x01\x02\x02\x12\x03<\
    \x04\x0e\x1a'\x20The\x20value\x20is\x20a\x20signed\x2064-bit\x20integer.\
    \n\n\x0e\n\x07\x04\0\x04\x01\x02\x02\x01\x12\x03<\x04\t\n\x0e\n\x07\x04\
    \0\x04\x01\x02\x02\x02\x12\x03<\x0c\r\nG\n\x06\x04\0\x04\x01\x02\x03\x12\
    \x03?\x04\x0f\x1a8\x20The\x20value\x20is\x20a\x20double\x20precision\x20\
    floating\x20point\x20number.\n\n\x0e\n\x07\x04\0\x04\x01\x02\x03\x01\x12\
    \x03?\x04\n\n\x0e\n\x07\x04\0\x04\x01\x02\x03\x02\x12\x03?\r\x0e\nm\n\
    \x06\x04\0\x04\x01\x02\x04\x12\x03C\x04\x0f\x1a^\x20The\x20value\x20is\
    \x20a\x20text\x20string.\n\x20This\x20value\x20type\x20can\x20be\x20used\
    \x20only\x20if\x20the\x20metric\x20kind\x20is\x20`GAUGE`.\n\n\x0e\n\x07\
    \x04\0\x04\x01\x02\x04\x01\x12\x03C\x04\n\n\x0e\n\x07\x04\0\x04\x01\x02\
    \x04\x02\x12\x03C\r\x0e\nJ\n\x06\x04\0\x04\x01\x02\x05\x12\x03F\x04\x15\
    \x1a;\x20The\x20value\x20is\x20a\x20[`Distribution`][google.api.Distribu\
    tion].\n\n\x0e\n\x07\x04\0\x04\x01\x02\x05\x01\x12\x03F\x04\x10\n\x0e\n\
    \x07\x04\0\x04\x01\x02\x05\x02\x12\x03F\x13\x14\n$\n\x06\x04\0\x04\x01\
    \x02\x06\x12\x03I\x04\x0e\x1a\x15\x20The\x20value\x20is\x20money.\n\n\
    \x0e\n\x07\x04\0\x04\x01\x02\x06\x01\x12\x03I\x04\t\n\x0e\n\x07\x04\0\
    \x04\x01\x02\x06\x02\x12\x03I\x0c\r\n\xff\x03\n\x04\x04\0\x02\0\x12\x03T\
    \x02\x12\x1a\xf1\x03\x20The\x20resource\x20name\x20of\x20the\x20metric\
    \x20descriptor.\x20Depending\x20on\x20the\n\x20implementation,\x20the\
    \x20name\x20typically\x20includes:\x20(1)\x20the\x20parent\x20resource\
    \x20name\n\x20that\x20defines\x20the\x20scope\x20of\x20the\x20metric\x20\
    type\x20or\x20of\x20its\x20data;\x20and\x20(2)\x20the\n\x20metric's\x20U\
    RL-encoded\x20type,\x20which\x20also\x20appears\x20in\x20the\x20`type`\
    \x20field\x20of\x20this\n\x20descriptor.\x20For\x20example,\x20following\
    \x20is\x20the\x20resource\x20name\x20of\x20a\x20custom\n\x20metric\x20wi\
    thin\x20the\x20GCP\x20project\x20`my-project-id`:\n\n\x20\x20\x20\x20\
    \x20\"projects/my-project-id/metricDescriptors/custom.googleapis.com%2Fi\
    nvoice%2Fpaid%2Famount\"\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04T\x02J\x03\n\
    \x0c\n\x05\x04\0\x02\0\x05\x12\x03T\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03T\t\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03T\x10\x11\n\xe8\x02\n\
    \x04\x04\0\x02\x01\x12\x03]\x02\x12\x1a\xda\x02\x20The\x20metric\x20type\
    ,\x20including\x20its\x20DNS\x20name\x20prefix.\x20The\x20type\x20is\x20\
    not\n\x20URL-encoded.\x20\x20All\x20user-defined\x20custom\x20metric\x20\
    types\x20have\x20the\x20DNS\x20name\n\x20`custom.googleapis.com`.\x20\
    \x20Metric\x20types\x20should\x20use\x20a\x20natural\x20hierarchical\n\
    \x20grouping.\x20For\x20example:\n\n\x20\x20\x20\x20\x20\"custom.googlea\
    pis.com/invoice/paid/amount\"\n\x20\x20\x20\x20\x20\"appengine.googleapi\
    s.com/http/server/response_latencies\"\n\n\r\n\x05\x04\0\x02\x01\x04\x12\
    \x04]\x02T\x12\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03]\x02\x08\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03]\t\r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03]\x10\x11\n\xd5\x02\n\x04\x04\0\x02\x02\x12\x03e\x02&\x1a\xc7\x02\
    \x20The\x20set\x20of\x20labels\x20that\x20can\x20be\x20used\x20to\x20des\
    cribe\x20a\x20specific\n\x20instance\x20of\x20this\x20metric\x20type.\
    \x20For\x20example,\x20the\n\x20`appengine.googleapis.com/http/server/re\
    sponse_latencies`\x20metric\n\x20type\x20has\x20a\x20label\x20for\x20the\
    \x20HTTP\x20response\x20code,\x20`response_code`,\x20so\n\x20you\x20can\
    \x20look\x20at\x20latencies\x20for\x20successful\x20responses\x20or\x20j\
    ust\n\x20for\x20responses\x20that\x20failed.\n\n\x0c\n\x05\x04\0\x02\x02\
    \x04\x12\x03e\x02\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03e\x0b\x1a\n\x0c\
    \n\x05\x04\0\x02\x02\x01\x12\x03e\x1b!\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03e$%\n\xa6\x01\n\x04\x04\0\x02\x03\x12\x03i\x02\x1d\x1a\x98\x01\x20Wh\
    ether\x20the\x20metric\x20records\x20instantaneous\x20values,\x20changes\
    \x20to\x20a\x20value,\x20etc.\n\x20Some\x20combinations\x20of\x20`metric\
    _kind`\x20and\x20`value_type`\x20might\x20not\x20be\x20supported.\n\n\r\
    \n\x05\x04\0\x02\x03\x04\x12\x04i\x02e&\n\x0c\n\x05\x04\0\x02\x03\x06\
    \x12\x03i\x02\x0c\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03i\r\x18\n\x0c\n\
    \x05\x04\0\x02\x03\x03\x12\x03i\x1b\x1c\n\xa1\x01\n\x04\x04\0\x02\x04\
    \x12\x03m\x02\x1b\x1a\x93\x01\x20Whether\x20the\x20measurement\x20is\x20\
    an\x20integer,\x20a\x20floating-point\x20number,\x20etc.\n\x20Some\x20co\
    mbinations\x20of\x20`metric_kind`\x20and\x20`value_type`\x20might\x20not\
    \x20be\x20supported.\n\n\r\n\x05\x04\0\x02\x04\x04\x12\x04m\x02i\x1d\n\
    \x0c\n\x05\x04\0\x02\x04\x06\x12\x03m\x02\x0b\n\x0c\n\x05\x04\0\x02\x04\
    \x01\x12\x03m\x0c\x16\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03m\x19\x1a\n\
    \xe2\r\n\x04\x04\0\x02\x05\x12\x04\xaf\x01\x02\x12\x1a\xd3\r\x20The\x20u\
    nit\x20in\x20which\x20the\x20metric\x20value\x20is\x20reported.\x20It\
    \x20is\x20only\x20applicable\n\x20if\x20the\x20`value_type`\x20is\x20`IN\
    T64`,\x20`DOUBLE`,\x20or\x20`DISTRIBUTION`.\x20The\n\x20supported\x20uni\
    ts\x20are\x20a\x20subset\x20of\x20[The\x20Unified\x20Code\x20for\x20Unit\
    s\x20of\n\x20Measure](http://unitsofmeasure.org/ucum.html)\x20standard:\
    \n\n\x20**Basic\x20units\x20(UNIT)**\n\n\x20*\x20`bit`\x20\x20\x20bit\n\
    \x20*\x20`By`\x20\x20\x20\x20byte\n\x20*\x20`s`\x20\x20\x20\x20\x20secon\
    d\n\x20*\x20`min`\x20\x20\x20minute\n\x20*\x20`h`\x20\x20\x20\x20\x20hou\
    r\n\x20*\x20`d`\x20\x20\x20\x20\x20day\n\n\x20**Prefixes\x20(PREFIX)**\n\
    \n\x20*\x20`k`\x20\x20\x20\x20\x20kilo\x20\x20\x20\x20(10**3)\n\x20*\x20\
    `M`\x20\x20\x20\x20\x20mega\x20\x20\x20\x20(10**6)\n\x20*\x20`G`\x20\x20\
    \x20\x20\x20giga\x20\x20\x20\x20(10**9)\n\x20*\x20`T`\x20\x20\x20\x20\
    \x20tera\x20\x20\x20\x20(10**12)\n\x20*\x20`P`\x20\x20\x20\x20\x20peta\
    \x20\x20\x20\x20(10**15)\n\x20*\x20`E`\x20\x20\x20\x20\x20exa\x20\x20\
    \x20\x20\x20(10**18)\n\x20*\x20`Z`\x20\x20\x20\x20\x20zetta\x20\x20\x20(\
    10**21)\n\x20*\x20`Y`\x20\x20\x20\x20\x20yotta\x20\x20\x20(10**24)\n\x20\
    *\x20`m`\x20\x20\x20\x20\x20milli\x20\x20\x20(10**-3)\n\x20*\x20`u`\x20\
    \x20\x20\x20\x20micro\x20\x20\x20(10**-6)\n\x20*\x20`n`\x20\x20\x20\x20\
    \x20nano\x20\x20\x20\x20(10**-9)\n\x20*\x20`p`\x20\x20\x20\x20\x20pico\
    \x20\x20\x20\x20(10**-12)\n\x20*\x20`f`\x20\x20\x20\x20\x20femto\x20\x20\
    \x20(10**-15)\n\x20*\x20`a`\x20\x20\x20\x20\x20atto\x20\x20\x20\x20(10**\
    -18)\n\x20*\x20`z`\x20\x20\x20\x20\x20zepto\x20\x20\x20(10**-21)\n\x20*\
    \x20`y`\x20\x20\x20\x20\x20yocto\x20\x20\x20(10**-24)\n\x20*\x20`Ki`\x20\
    \x20\x20\x20kibi\x20\x20\x20\x20(2**10)\n\x20*\x20`Mi`\x20\x20\x20\x20me\
    bi\x20\x20\x20\x20(2**20)\n\x20*\x20`Gi`\x20\x20\x20\x20gibi\x20\x20\x20\
    \x20(2**30)\n\x20*\x20`Ti`\x20\x20\x20\x20tebi\x20\x20\x20\x20(2**40)\n\
    \n\x20**Grammar**\n\n\x20The\x20grammar\x20includes\x20the\x20dimensionl\
    ess\x20unit\x20`1`,\x20such\x20as\x20`1/s`.\n\n\x20The\x20grammar\x20als\
    o\x20includes\x20these\x20connectors:\n\n\x20*\x20`/`\x20\x20\x20\x20div\
    ision\x20(as\x20an\x20infix\x20operator,\x20e.g.\x20`1/s`).\n\x20*\x20`.\
    `\x20\x20\x20\x20multiplication\x20(as\x20an\x20infix\x20operator,\x20e.\
    g.\x20`GBy.d`)\n\n\x20The\x20grammar\x20for\x20a\x20unit\x20is\x20as\x20\
    follows:\n\n\x20\x20\x20\x20\x20Expression\x20=\x20Component\x20{\x20\".\
    \"\x20Component\x20}\x20{\x20\"/\"\x20Component\x20}\x20;\n\n\x20\x20\
    \x20\x20\x20Component\x20=\x20[\x20PREFIX\x20]\x20UNIT\x20[\x20Annotatio\
    n\x20]\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20|\
    \x20Annotation\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20|\x20\"1\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20;\n\n\x20\x20\x20\x20\x20Annotation\x20=\x20\"{\"\x20NAME\x20\"}\"\
    \x20;\n\n\x20Notes:\n\n\x20*\x20`Annotation`\x20is\x20just\x20a\x20comme\
    nt\x20if\x20it\x20follows\x20a\x20`UNIT`\x20and\x20is\n\x20\x20\x20\x20e\
    quivalent\x20to\x20`1`\x20if\x20it\x20is\x20used\x20alone.\x20For\x20exa\
    mples,\n\x20\x20\x20\x20`{requests}/s\x20==\x201/s`,\x20`By{transmitted}\
    /s\x20==\x20By/s`.\n\x20*\x20`NAME`\x20is\x20a\x20sequence\x20of\x20non-\
    blank\x20printable\x20ASCII\x20characters\x20not\n\x20\x20\x20\x20contai\
    ning\x20'{'\x20or\x20'}'.\n\n\x0e\n\x05\x04\0\x02\x05\x04\x12\x05\xaf\
    \x01\x02m\x1b\n\r\n\x05\x04\0\x02\x05\x05\x12\x04\xaf\x01\x02\x08\n\r\n\
    \x05\x04\0\x02\x05\x01\x12\x04\xaf\x01\t\r\n\r\n\x05\x04\0\x02\x05\x03\
    \x12\x04\xaf\x01\x10\x11\nY\n\x04\x04\0\x02\x06\x12\x04\xb2\x01\x02\x19\
    \x1aK\x20A\x20detailed\x20description\x20of\x20the\x20metric,\x20which\
    \x20can\x20be\x20used\x20in\x20documentation.\n\n\x0f\n\x05\x04\0\x02\
    \x06\x04\x12\x06\xb2\x01\x02\xaf\x01\x12\n\r\n\x05\x04\0\x02\x06\x05\x12\
    \x04\xb2\x01\x02\x08\n\r\n\x05\x04\0\x02\x06\x01\x12\x04\xb2\x01\t\x14\n\
    \r\n\x05\x04\0\x02\x06\x03\x12\x04\xb2\x01\x17\x18\n\xa4\x01\n\x04\x04\0\
    \x02\x07\x12\x04\xb6\x01\x02\x1a\x1a\x95\x01\x20A\x20concise\x20name\x20\
    for\x20the\x20metric,\x20which\x20can\x20be\x20displayed\x20in\x20user\
    \x20interfaces.\n\x20Use\x20sentence\x20case\x20without\x20an\x20ending\
    \x20period,\x20for\x20example\x20\"Request\x20count\".\n\n\x0f\n\x05\x04\
    \0\x02\x07\x04\x12\x06\xb6\x01\x02\xb2\x01\x19\n\r\n\x05\x04\0\x02\x07\
    \x05\x12\x04\xb6\x01\x02\x08\n\r\n\x05\x04\0\x02\x07\x01\x12\x04\xb6\x01\
    \t\x15\n\r\n\x05\x04\0\x02\x07\x03\x12\x04\xb6\x01\x18\x19\n\x92\x01\n\
    \x02\x04\x01\x12\x06\xbb\x01\0\xc3\x01\x01\x1a\x83\x01\x20A\x20specific\
    \x20metric,\x20identified\x20by\x20specifying\x20values\x20for\x20all\
    \x20of\x20the\n\x20labels\x20of\x20a\x20[`MetricDescriptor`][google.api.\
    MetricDescriptor].\n\n\x0b\n\x03\x04\x01\x01\x12\x04\xbb\x01\x08\x0e\n\
    \xa4\x01\n\x04\x04\x01\x02\0\x12\x04\xbe\x01\x02\x12\x1a\x95\x01\x20An\
    \x20existing\x20metric\x20type,\x20see\x20[google.api.MetricDescriptor][\
    google.api.MetricDescriptor].\n\x20For\x20example,\x20`custom.googleapis\
    .com/invoice/paid/amount`.\n\n\x0f\n\x05\x04\x01\x02\0\x04\x12\x06\xbe\
    \x01\x02\xbb\x01\x10\n\r\n\x05\x04\x01\x02\0\x05\x12\x04\xbe\x01\x02\x08\
    \n\r\n\x05\x04\x01\x02\0\x01\x12\x04\xbe\x01\t\r\n\r\n\x05\x04\x01\x02\0\
    \x03\x12\x04\xbe\x01\x10\x11\n\x92\x01\n\x04\x04\x01\x02\x01\x12\x04\xc2\
    \x01\x02!\x1a\x83\x01\x20The\x20set\x20of\x20label\x20values\x20that\x20\
    uniquely\x20identify\x20this\x20metric.\x20All\n\x20labels\x20listed\x20\
    in\x20the\x20`MetricDescriptor`\x20must\x20be\x20assigned\x20values.\n\n\
    \x0f\n\x05\x04\x01\x02\x01\x04\x12\x06\xc2\x01\x02\xbe\x01\x12\n\r\n\x05\
    \x04\x01\x02\x01\x06\x12\x04\xc2\x01\x02\x15\n\r\n\x05\x04\x01\x02\x01\
    \x01\x12\x04\xc2\x01\x16\x1c\n\r\n\x05\x04\x01\x02\x01\x03\x12\x04\xc2\
    \x01\x1f\x20b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
