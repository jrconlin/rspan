// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Context {
    // message fields
    pub rules: ::protobuf::RepeatedField<ContextRule>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Context {
    pub fn new() -> Context {
        ::std::default::Default::default()
    }

    // repeated .google.api.ContextRule rules = 1;

    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<ContextRule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<ContextRule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<ContextRule> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }

    pub fn get_rules(&self) -> &[ContextRule] {
        &self.rules
    }
}

impl ::protobuf::Message for Context {
    fn is_initialized(&self) -> bool {
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rules {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Context {
        Context::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ContextRule>>(
                    "rules",
                    |m: &Context| { &m.rules },
                    |m: &mut Context| { &mut m.rules },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Context>(
                    "Context",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Context {
        static mut instance: ::protobuf::lazy::Lazy<Context> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Context,
        };
        unsafe {
            instance.get(Context::new)
        }
    }
}

impl ::protobuf::Clear for Context {
    fn clear(&mut self) {
        self.clear_rules();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Context {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Context {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ContextRule {
    // message fields
    pub selector: ::std::string::String,
    pub requested: ::protobuf::RepeatedField<::std::string::String>,
    pub provided: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ContextRule {
    pub fn new() -> ContextRule {
        ::std::default::Default::default()
    }

    // string selector = 1;

    pub fn clear_selector(&mut self) {
        self.selector.clear();
    }

    // Param is passed by value, moved
    pub fn set_selector(&mut self, v: ::std::string::String) {
        self.selector = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_selector(&mut self) -> &mut ::std::string::String {
        &mut self.selector
    }

    // Take field
    pub fn take_selector(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.selector, ::std::string::String::new())
    }

    pub fn get_selector(&self) -> &str {
        &self.selector
    }

    // repeated string requested = 2;

    pub fn clear_requested(&mut self) {
        self.requested.clear();
    }

    // Param is passed by value, moved
    pub fn set_requested(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.requested = v;
    }

    // Mutable pointer to the field.
    pub fn mut_requested(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.requested
    }

    // Take field
    pub fn take_requested(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.requested, ::protobuf::RepeatedField::new())
    }

    pub fn get_requested(&self) -> &[::std::string::String] {
        &self.requested
    }

    // repeated string provided = 3;

    pub fn clear_provided(&mut self) {
        self.provided.clear();
    }

    // Param is passed by value, moved
    pub fn set_provided(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.provided = v;
    }

    // Mutable pointer to the field.
    pub fn mut_provided(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.provided
    }

    // Take field
    pub fn take_provided(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.provided, ::protobuf::RepeatedField::new())
    }

    pub fn get_provided(&self) -> &[::std::string::String] {
        &self.provided
    }
}

impl ::protobuf::Message for ContextRule {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.selector)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.requested)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.provided)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.selector.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.selector);
        }
        for value in &self.requested {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.provided {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.selector.is_empty() {
            os.write_string(1, &self.selector)?;
        }
        for v in &self.requested {
            os.write_string(2, &v)?;
        };
        for v in &self.provided {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContextRule {
        ContextRule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "selector",
                    |m: &ContextRule| { &m.selector },
                    |m: &mut ContextRule| { &mut m.selector },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "requested",
                    |m: &ContextRule| { &m.requested },
                    |m: &mut ContextRule| { &mut m.requested },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "provided",
                    |m: &ContextRule| { &m.provided },
                    |m: &mut ContextRule| { &mut m.provided },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ContextRule>(
                    "ContextRule",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ContextRule {
        static mut instance: ::protobuf::lazy::Lazy<ContextRule> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ContextRule,
        };
        unsafe {
            instance.get(ContextRule::new)
        }
    }
}

impl ::protobuf::Clear for ContextRule {
    fn clear(&mut self) {
        self.clear_selector();
        self.clear_requested();
        self.clear_provided();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ContextRule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContextRule {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18google/api/context.proto\x12\ngoogle.api\"8\n\x07Context\x12-\n\
    \x05rules\x18\x01\x20\x03(\x0b2\x17.google.api.ContextRuleR\x05rules\"c\
    \n\x0bContextRule\x12\x1a\n\x08selector\x18\x01\x20\x01(\tR\x08selector\
    \x12\x1c\n\trequested\x18\x02\x20\x03(\tR\trequested\x12\x1a\n\x08provid\
    ed\x18\x03\x20\x03(\tR\x08providedBn\n\x0ecom.google.apiB\x0cContextProt\
    oP\x01ZEgoogle.golang.org/genproto/googleapis/api/serviceconfig;servicec\
    onfig\xa2\x02\x04GAPIJ\xbb\x11\n\x06\x12\x04\x0e\0>\x01\n\xbd\x04\n\x01\
    \x0c\x12\x03\x0e\0\x122\xb2\x04\x20Copyright\x202017\x20Google\x20Inc.\n\
    \n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Version\x202.0\
    \x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\x20file\
    \x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20You\x20ma\
    y\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\x20\x20\
    \x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\x20requ\
    ired\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20writing,\
    \x20software\n\x20distributed\x20under\x20the\x20License\x20is\x20distri\
    buted\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\
    \x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\x20or\
    \x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\x20lan\
    guage\x20governing\x20permissions\x20and\n\x20limitations\x20under\x20th\
    e\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\x08\x12\n\x08\n\x01\x08\x12\
    \x03\x12\0\\\n\x0b\n\x04\x08\xe7\x07\0\x12\x03\x12\0\\\n\x0c\n\x05\x08\
    \xe7\x07\0\x02\x12\x03\x12\x07\x11\n\r\n\x06\x08\xe7\x07\0\x02\0\x12\x03\
    \x12\x07\x11\n\x0e\n\x07\x08\xe7\x07\0\x02\0\x01\x12\x03\x12\x07\x11\n\
    \x0c\n\x05\x08\xe7\x07\0\x07\x12\x03\x12\x14[\n\x08\n\x01\x08\x12\x03\
    \x13\0\"\n\x0b\n\x04\x08\xe7\x07\x01\x12\x03\x13\0\"\n\x0c\n\x05\x08\xe7\
    \x07\x01\x02\x12\x03\x13\x07\x1a\n\r\n\x06\x08\xe7\x07\x01\x02\0\x12\x03\
    \x13\x07\x1a\n\x0e\n\x07\x08\xe7\x07\x01\x02\0\x01\x12\x03\x13\x07\x1a\n\
    \x0c\n\x05\x08\xe7\x07\x01\x03\x12\x03\x13\x1d!\n\x08\n\x01\x08\x12\x03\
    \x14\0-\n\x0b\n\x04\x08\xe7\x07\x02\x12\x03\x14\0-\n\x0c\n\x05\x08\xe7\
    \x07\x02\x02\x12\x03\x14\x07\x1b\n\r\n\x06\x08\xe7\x07\x02\x02\0\x12\x03\
    \x14\x07\x1b\n\x0e\n\x07\x08\xe7\x07\x02\x02\0\x01\x12\x03\x14\x07\x1b\n\
    \x0c\n\x05\x08\xe7\x07\x02\x07\x12\x03\x14\x1e,\n\x08\n\x01\x08\x12\x03\
    \x15\0'\n\x0b\n\x04\x08\xe7\x07\x03\x12\x03\x15\0'\n\x0c\n\x05\x08\xe7\
    \x07\x03\x02\x12\x03\x15\x07\x13\n\r\n\x06\x08\xe7\x07\x03\x02\0\x12\x03\
    \x15\x07\x13\n\x0e\n\x07\x08\xe7\x07\x03\x02\0\x01\x12\x03\x15\x07\x13\n\
    \x0c\n\x05\x08\xe7\x07\x03\x07\x12\x03\x15\x16&\n\x08\n\x01\x08\x12\x03\
    \x16\0\"\n\x0b\n\x04\x08\xe7\x07\x04\x12\x03\x16\0\"\n\x0c\n\x05\x08\xe7\
    \x07\x04\x02\x12\x03\x16\x07\x18\n\r\n\x06\x08\xe7\x07\x04\x02\0\x12\x03\
    \x16\x07\x18\n\x0e\n\x07\x08\xe7\x07\x04\x02\0\x01\x12\x03\x16\x07\x18\n\
    \x0c\n\x05\x08\xe7\x07\x04\x07\x12\x03\x16\x1b!\n\xbc\x03\n\x02\x04\0\
    \x12\x04*\0/\x01\x1a\xaf\x03\x20`Context`\x20defines\x20which\x20context\
    s\x20an\x20API\x20requests.\n\n\x20Example:\n\n\x20\x20\x20\x20\x20conte\
    xt:\n\x20\x20\x20\x20\x20\x20\x20rules:\n\x20\x20\x20\x20\x20\x20\x20-\
    \x20selector:\x20\"*\"\n\x20\x20\x20\x20\x20\x20\x20\x20\x20requested:\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20-\x20google.rpc.context.ProjectConte\
    xt\n\x20\x20\x20\x20\x20\x20\x20\x20\x20-\x20google.rpc.context.OriginCo\
    ntext\n\n\x20The\x20above\x20specifies\x20that\x20all\x20methods\x20in\
    \x20the\x20API\x20request\n\x20`google.rpc.context.ProjectContext`\x20an\
    d\n\x20`google.rpc.context.OriginContext`.\n\n\x20Available\x20context\
    \x20types\x20are\x20defined\x20in\x20package\n\x20`google.rpc.context`.\
    \n\n\n\n\x03\x04\0\x01\x12\x03*\x08\x0f\n\x9b\x01\n\x04\x04\0\x02\0\x12\
    \x03.\x02!\x1a\x8d\x01\x20A\x20list\x20of\x20RPC\x20context\x20rules\x20\
    that\x20apply\x20to\x20individual\x20API\x20methods.\n\n\x20**NOTE:**\
    \x20All\x20service\x20configuration\x20rules\x20follow\x20\"last\x20one\
    \x20wins\"\x20order.\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03.\x02\n\n\x0c\
    \n\x05\x04\0\x02\0\x06\x12\x03.\x0b\x16\n\x0c\n\x05\x04\0\x02\0\x01\x12\
    \x03.\x17\x1c\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03.\x1f\x20\nc\n\x02\x04\
    \x01\x12\x043\0>\x01\x1aW\x20A\x20context\x20rule\x20provides\x20informa\
    tion\x20about\x20the\x20context\x20for\x20an\x20individual\x20API\n\x20e\
    lement.\n\n\n\n\x03\x04\x01\x01\x12\x033\x08\x13\n\x90\x01\n\x04\x04\x01\
    \x02\0\x12\x037\x02\x16\x1a\x82\x01\x20Selects\x20the\x20methods\x20to\
    \x20which\x20this\x20rule\x20applies.\n\n\x20Refer\x20to\x20[selector][g\
    oogle.api.DocumentationRule.selector]\x20for\x20syntax\x20details.\n\n\r\
    \n\x05\x04\x01\x02\0\x04\x12\x047\x023\x15\n\x0c\n\x05\x04\x01\x02\0\x05\
    \x12\x037\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x037\t\x11\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x037\x14\x15\n?\n\x04\x04\x01\x02\x01\x12\x03\
    :\x02\x20\x1a2\x20A\x20list\x20of\x20full\x20type\x20names\x20of\x20requ\
    ested\x20contexts.\n\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\x03:\x02\n\n\
    \x0c\n\x05\x04\x01\x02\x01\x05\x12\x03:\x0b\x11\n\x0c\n\x05\x04\x01\x02\
    \x01\x01\x12\x03:\x12\x1b\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03:\x1e\
    \x1f\n>\n\x04\x04\x01\x02\x02\x12\x03=\x02\x1f\x1a1\x20A\x20list\x20of\
    \x20full\x20type\x20names\x20of\x20provided\x20contexts.\n\n\x0c\n\x05\
    \x04\x01\x02\x02\x04\x12\x03=\x02\n\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\
    \x03=\x0b\x11\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03=\x12\x1a\n\x0c\n\
    \x05\x04\x01\x02\x02\x03\x12\x03=\x1d\x1eb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
