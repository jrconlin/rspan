// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Control {
    // message fields
    pub environment: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Control {
    pub fn new() -> Control {
        ::std::default::Default::default()
    }

    // string environment = 1;

    pub fn clear_environment(&mut self) {
        self.environment.clear();
    }

    // Param is passed by value, moved
    pub fn set_environment(&mut self, v: ::std::string::String) {
        self.environment = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_environment(&mut self) -> &mut ::std::string::String {
        &mut self.environment
    }

    // Take field
    pub fn take_environment(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.environment, ::std::string::String::new())
    }

    pub fn get_environment(&self) -> &str {
        &self.environment
    }
}

impl ::protobuf::Message for Control {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.environment)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.environment.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.environment);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.environment.is_empty() {
            os.write_string(1, &self.environment)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Control {
        Control::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "environment",
                    |m: &Control| { &m.environment },
                    |m: &mut Control| { &mut m.environment },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Control>(
                    "Control",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Control {
        static mut instance: ::protobuf::lazy::Lazy<Control> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Control,
        };
        unsafe {
            instance.get(Control::new)
        }
    }
}

impl ::protobuf::Clear for Control {
    fn clear(&mut self) {
        self.clear_environment();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Control {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Control {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x18google/api/control.proto\x12\ngoogle.api\"+\n\x07Control\x12\x20\n\
    \x0benvironment\x18\x01\x20\x01(\tR\x0benvironmentBn\n\x0ecom.google.api\
    B\x0cControlProtoP\x01ZEgoogle.golang.org/genproto/googleapis/api/servic\
    econfig;serviceconfig\xa2\x02\x04GAPIJ\xed\n\n\x06\x12\x04\x0e\0\x20\x01\
    \n\xbd\x04\n\x01\x0c\x12\x03\x0e\0\x122\xb2\x04\x20Copyright\x202017\x20\
    Google\x20Inc.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20\
    Version\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\
    \x20this\x20file\x20except\x20in\x20compliance\x20with\x20the\x20License\
    .\n\x20You\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\
    \n\x20\x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20\
    Unless\x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20i\
    n\x20writing,\x20software\n\x20distributed\x20under\x20the\x20License\
    \x20is\x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\
    \x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20ex\
    press\x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20spec\
    ific\x20language\x20governing\x20permissions\x20and\n\x20limitations\x20\
    under\x20the\x20License.\n\n\x08\n\x01\x02\x12\x03\x10\x08\x12\n\x08\n\
    \x01\x08\x12\x03\x12\0\\\n\x0b\n\x04\x08\xe7\x07\0\x12\x03\x12\0\\\n\x0c\
    \n\x05\x08\xe7\x07\0\x02\x12\x03\x12\x07\x11\n\r\n\x06\x08\xe7\x07\0\x02\
    \0\x12\x03\x12\x07\x11\n\x0e\n\x07\x08\xe7\x07\0\x02\0\x01\x12\x03\x12\
    \x07\x11\n\x0c\n\x05\x08\xe7\x07\0\x07\x12\x03\x12\x14[\n\x08\n\x01\x08\
    \x12\x03\x13\0\"\n\x0b\n\x04\x08\xe7\x07\x01\x12\x03\x13\0\"\n\x0c\n\x05\
    \x08\xe7\x07\x01\x02\x12\x03\x13\x07\x1a\n\r\n\x06\x08\xe7\x07\x01\x02\0\
    \x12\x03\x13\x07\x1a\n\x0e\n\x07\x08\xe7\x07\x01\x02\0\x01\x12\x03\x13\
    \x07\x1a\n\x0c\n\x05\x08\xe7\x07\x01\x03\x12\x03\x13\x1d!\n\x08\n\x01\
    \x08\x12\x03\x14\0-\n\x0b\n\x04\x08\xe7\x07\x02\x12\x03\x14\0-\n\x0c\n\
    \x05\x08\xe7\x07\x02\x02\x12\x03\x14\x07\x1b\n\r\n\x06\x08\xe7\x07\x02\
    \x02\0\x12\x03\x14\x07\x1b\n\x0e\n\x07\x08\xe7\x07\x02\x02\0\x01\x12\x03\
    \x14\x07\x1b\n\x0c\n\x05\x08\xe7\x07\x02\x07\x12\x03\x14\x1e,\n\x08\n\
    \x01\x08\x12\x03\x15\0'\n\x0b\n\x04\x08\xe7\x07\x03\x12\x03\x15\0'\n\x0c\
    \n\x05\x08\xe7\x07\x03\x02\x12\x03\x15\x07\x13\n\r\n\x06\x08\xe7\x07\x03\
    \x02\0\x12\x03\x15\x07\x13\n\x0e\n\x07\x08\xe7\x07\x03\x02\0\x01\x12\x03\
    \x15\x07\x13\n\x0c\n\x05\x08\xe7\x07\x03\x07\x12\x03\x15\x16&\n\x08\n\
    \x01\x08\x12\x03\x16\0\"\n\x0b\n\x04\x08\xe7\x07\x04\x12\x03\x16\0\"\n\
    \x0c\n\x05\x08\xe7\x07\x04\x02\x12\x03\x16\x07\x18\n\r\n\x06\x08\xe7\x07\
    \x04\x02\0\x12\x03\x16\x07\x18\n\x0e\n\x07\x08\xe7\x07\x04\x02\0\x01\x12\
    \x03\x16\x07\x18\n\x0c\n\x05\x08\xe7\x07\x04\x07\x12\x03\x16\x1b!\n\xb2\
    \x01\n\x02\x04\0\x12\x04\x1c\0\x20\x01\x1a\xa5\x01\x20Selects\x20and\x20\
    configures\x20the\x20service\x20controller\x20used\x20by\x20the\x20servi\
    ce.\x20\x20The\n\x20service\x20controller\x20handles\x20features\x20like\
    \x20abuse,\x20quota,\x20billing,\x20logging,\n\x20monitoring,\x20etc.\n\
    \n\n\n\x03\x04\0\x01\x12\x03\x1c\x08\x0f\n\x84\x01\n\x04\x04\0\x02\0\x12\
    \x03\x1f\x02\x19\x1aw\x20The\x20service\x20control\x20environment\x20to\
    \x20use.\x20If\x20empty,\x20no\x20control\x20plane\n\x20feature\x20(like\
    \x20quota\x20and\x20billing)\x20will\x20be\x20enabled.\n\n\r\n\x05\x04\0\
    \x02\0\x04\x12\x04\x1f\x02\x1c\x11\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x1f\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x1f\t\x14\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x1f\x17\x18b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
