// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Distribution {
    // message fields
    pub count: i64,
    pub mean: f64,
    pub sum_of_squared_deviation: f64,
    pub range: ::protobuf::SingularPtrField<Distribution_Range>,
    pub bucket_options: ::protobuf::SingularPtrField<Distribution_BucketOptions>,
    pub bucket_counts: ::std::vec::Vec<i64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Distribution {
    pub fn new() -> Distribution {
        ::std::default::Default::default()
    }

    // int64 count = 1;

    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: i64) {
        self.count = v;
    }

    pub fn get_count(&self) -> i64 {
        self.count
    }

    // double mean = 2;

    pub fn clear_mean(&mut self) {
        self.mean = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mean(&mut self, v: f64) {
        self.mean = v;
    }

    pub fn get_mean(&self) -> f64 {
        self.mean
    }

    // double sum_of_squared_deviation = 3;

    pub fn clear_sum_of_squared_deviation(&mut self) {
        self.sum_of_squared_deviation = 0.;
    }

    // Param is passed by value, moved
    pub fn set_sum_of_squared_deviation(&mut self, v: f64) {
        self.sum_of_squared_deviation = v;
    }

    pub fn get_sum_of_squared_deviation(&self) -> f64 {
        self.sum_of_squared_deviation
    }

    // .google.api.Distribution.Range range = 4;

    pub fn clear_range(&mut self) {
        self.range.clear();
    }

    pub fn has_range(&self) -> bool {
        self.range.is_some()
    }

    // Param is passed by value, moved
    pub fn set_range(&mut self, v: Distribution_Range) {
        self.range = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_range(&mut self) -> &mut Distribution_Range {
        if self.range.is_none() {
            self.range.set_default();
        }
        self.range.as_mut().unwrap()
    }

    // Take field
    pub fn take_range(&mut self) -> Distribution_Range {
        self.range.take().unwrap_or_else(|| Distribution_Range::new())
    }

    pub fn get_range(&self) -> &Distribution_Range {
        self.range.as_ref().unwrap_or_else(|| Distribution_Range::default_instance())
    }

    // .google.api.Distribution.BucketOptions bucket_options = 6;

    pub fn clear_bucket_options(&mut self) {
        self.bucket_options.clear();
    }

    pub fn has_bucket_options(&self) -> bool {
        self.bucket_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bucket_options(&mut self, v: Distribution_BucketOptions) {
        self.bucket_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bucket_options(&mut self) -> &mut Distribution_BucketOptions {
        if self.bucket_options.is_none() {
            self.bucket_options.set_default();
        }
        self.bucket_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_bucket_options(&mut self) -> Distribution_BucketOptions {
        self.bucket_options.take().unwrap_or_else(|| Distribution_BucketOptions::new())
    }

    pub fn get_bucket_options(&self) -> &Distribution_BucketOptions {
        self.bucket_options.as_ref().unwrap_or_else(|| Distribution_BucketOptions::default_instance())
    }

    // repeated int64 bucket_counts = 7;

    pub fn clear_bucket_counts(&mut self) {
        self.bucket_counts.clear();
    }

    // Param is passed by value, moved
    pub fn set_bucket_counts(&mut self, v: ::std::vec::Vec<i64>) {
        self.bucket_counts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_bucket_counts(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.bucket_counts
    }

    // Take field
    pub fn take_bucket_counts(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.bucket_counts, ::std::vec::Vec::new())
    }

    pub fn get_bucket_counts(&self) -> &[i64] {
        &self.bucket_counts
    }
}

impl ::protobuf::Message for Distribution {
    fn is_initialized(&self) -> bool {
        for v in &self.range {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.bucket_options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.count = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.mean = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.sum_of_squared_deviation = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.range)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.bucket_options)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.bucket_counts)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.mean != 0. {
            my_size += 9;
        }
        if self.sum_of_squared_deviation != 0. {
            my_size += 9;
        }
        if let Some(ref v) = self.range.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.bucket_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.bucket_counts {
            my_size += ::protobuf::rt::value_size(7, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.count != 0 {
            os.write_int64(1, self.count)?;
        }
        if self.mean != 0. {
            os.write_double(2, self.mean)?;
        }
        if self.sum_of_squared_deviation != 0. {
            os.write_double(3, self.sum_of_squared_deviation)?;
        }
        if let Some(ref v) = self.range.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.bucket_options.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.bucket_counts {
            os.write_int64(7, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Distribution {
        Distribution::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "count",
                    |m: &Distribution| { &m.count },
                    |m: &mut Distribution| { &mut m.count },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "mean",
                    |m: &Distribution| { &m.mean },
                    |m: &mut Distribution| { &mut m.mean },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "sum_of_squared_deviation",
                    |m: &Distribution| { &m.sum_of_squared_deviation },
                    |m: &mut Distribution| { &mut m.sum_of_squared_deviation },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Distribution_Range>>(
                    "range",
                    |m: &Distribution| { &m.range },
                    |m: &mut Distribution| { &mut m.range },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Distribution_BucketOptions>>(
                    "bucket_options",
                    |m: &Distribution| { &m.bucket_options },
                    |m: &mut Distribution| { &mut m.bucket_options },
                ));
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "bucket_counts",
                    |m: &Distribution| { &m.bucket_counts },
                    |m: &mut Distribution| { &mut m.bucket_counts },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Distribution>(
                    "Distribution",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Distribution {
        static mut instance: ::protobuf::lazy::Lazy<Distribution> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Distribution,
        };
        unsafe {
            instance.get(Distribution::new)
        }
    }
}

impl ::protobuf::Clear for Distribution {
    fn clear(&mut self) {
        self.clear_count();
        self.clear_mean();
        self.clear_sum_of_squared_deviation();
        self.clear_range();
        self.clear_bucket_options();
        self.clear_bucket_counts();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Distribution {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Distribution {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Distribution_Range {
    // message fields
    pub min: f64,
    pub max: f64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Distribution_Range {
    pub fn new() -> Distribution_Range {
        ::std::default::Default::default()
    }

    // double min = 1;

    pub fn clear_min(&mut self) {
        self.min = 0.;
    }

    // Param is passed by value, moved
    pub fn set_min(&mut self, v: f64) {
        self.min = v;
    }

    pub fn get_min(&self) -> f64 {
        self.min
    }

    // double max = 2;

    pub fn clear_max(&mut self) {
        self.max = 0.;
    }

    // Param is passed by value, moved
    pub fn set_max(&mut self, v: f64) {
        self.max = v;
    }

    pub fn get_max(&self) -> f64 {
        self.max
    }
}

impl ::protobuf::Message for Distribution_Range {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.min = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.max = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.min != 0. {
            my_size += 9;
        }
        if self.max != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.min != 0. {
            os.write_double(1, self.min)?;
        }
        if self.max != 0. {
            os.write_double(2, self.max)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Distribution_Range {
        Distribution_Range::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "min",
                    |m: &Distribution_Range| { &m.min },
                    |m: &mut Distribution_Range| { &mut m.min },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "max",
                    |m: &Distribution_Range| { &m.max },
                    |m: &mut Distribution_Range| { &mut m.max },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Distribution_Range>(
                    "Distribution_Range",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Distribution_Range {
        static mut instance: ::protobuf::lazy::Lazy<Distribution_Range> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Distribution_Range,
        };
        unsafe {
            instance.get(Distribution_Range::new)
        }
    }
}

impl ::protobuf::Clear for Distribution_Range {
    fn clear(&mut self) {
        self.clear_min();
        self.clear_max();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Distribution_Range {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Distribution_Range {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Distribution_BucketOptions {
    // message oneof groups
    pub options: ::std::option::Option<Distribution_BucketOptions_oneof_options>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum Distribution_BucketOptions_oneof_options {
    linear_buckets(Distribution_BucketOptions_Linear),
    exponential_buckets(Distribution_BucketOptions_Exponential),
    explicit_buckets(Distribution_BucketOptions_Explicit),
}

impl Distribution_BucketOptions {
    pub fn new() -> Distribution_BucketOptions {
        ::std::default::Default::default()
    }

    // .google.api.Distribution.BucketOptions.Linear linear_buckets = 1;

    pub fn clear_linear_buckets(&mut self) {
        self.options = ::std::option::Option::None;
    }

    pub fn has_linear_buckets(&self) -> bool {
        match self.options {
            ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::linear_buckets(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_linear_buckets(&mut self, v: Distribution_BucketOptions_Linear) {
        self.options = ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::linear_buckets(v))
    }

    // Mutable pointer to the field.
    pub fn mut_linear_buckets(&mut self) -> &mut Distribution_BucketOptions_Linear {
        if let ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::linear_buckets(_)) = self.options {
        } else {
            self.options = ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::linear_buckets(Distribution_BucketOptions_Linear::new()));
        }
        match self.options {
            ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::linear_buckets(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_linear_buckets(&mut self) -> Distribution_BucketOptions_Linear {
        if self.has_linear_buckets() {
            match self.options.take() {
                ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::linear_buckets(v)) => v,
                _ => panic!(),
            }
        } else {
            Distribution_BucketOptions_Linear::new()
        }
    }

    pub fn get_linear_buckets(&self) -> &Distribution_BucketOptions_Linear {
        match self.options {
            ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::linear_buckets(ref v)) => v,
            _ => Distribution_BucketOptions_Linear::default_instance(),
        }
    }

    // .google.api.Distribution.BucketOptions.Exponential exponential_buckets = 2;

    pub fn clear_exponential_buckets(&mut self) {
        self.options = ::std::option::Option::None;
    }

    pub fn has_exponential_buckets(&self) -> bool {
        match self.options {
            ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::exponential_buckets(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_exponential_buckets(&mut self, v: Distribution_BucketOptions_Exponential) {
        self.options = ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::exponential_buckets(v))
    }

    // Mutable pointer to the field.
    pub fn mut_exponential_buckets(&mut self) -> &mut Distribution_BucketOptions_Exponential {
        if let ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::exponential_buckets(_)) = self.options {
        } else {
            self.options = ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::exponential_buckets(Distribution_BucketOptions_Exponential::new()));
        }
        match self.options {
            ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::exponential_buckets(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_exponential_buckets(&mut self) -> Distribution_BucketOptions_Exponential {
        if self.has_exponential_buckets() {
            match self.options.take() {
                ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::exponential_buckets(v)) => v,
                _ => panic!(),
            }
        } else {
            Distribution_BucketOptions_Exponential::new()
        }
    }

    pub fn get_exponential_buckets(&self) -> &Distribution_BucketOptions_Exponential {
        match self.options {
            ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::exponential_buckets(ref v)) => v,
            _ => Distribution_BucketOptions_Exponential::default_instance(),
        }
    }

    // .google.api.Distribution.BucketOptions.Explicit explicit_buckets = 3;

    pub fn clear_explicit_buckets(&mut self) {
        self.options = ::std::option::Option::None;
    }

    pub fn has_explicit_buckets(&self) -> bool {
        match self.options {
            ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::explicit_buckets(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_explicit_buckets(&mut self, v: Distribution_BucketOptions_Explicit) {
        self.options = ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::explicit_buckets(v))
    }

    // Mutable pointer to the field.
    pub fn mut_explicit_buckets(&mut self) -> &mut Distribution_BucketOptions_Explicit {
        if let ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::explicit_buckets(_)) = self.options {
        } else {
            self.options = ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::explicit_buckets(Distribution_BucketOptions_Explicit::new()));
        }
        match self.options {
            ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::explicit_buckets(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_explicit_buckets(&mut self) -> Distribution_BucketOptions_Explicit {
        if self.has_explicit_buckets() {
            match self.options.take() {
                ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::explicit_buckets(v)) => v,
                _ => panic!(),
            }
        } else {
            Distribution_BucketOptions_Explicit::new()
        }
    }

    pub fn get_explicit_buckets(&self) -> &Distribution_BucketOptions_Explicit {
        match self.options {
            ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::explicit_buckets(ref v)) => v,
            _ => Distribution_BucketOptions_Explicit::default_instance(),
        }
    }
}

impl ::protobuf::Message for Distribution_BucketOptions {
    fn is_initialized(&self) -> bool {
        if let Some(Distribution_BucketOptions_oneof_options::linear_buckets(ref v)) = self.options {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Distribution_BucketOptions_oneof_options::exponential_buckets(ref v)) = self.options {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Distribution_BucketOptions_oneof_options::explicit_buckets(ref v)) = self.options {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.options = ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::linear_buckets(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.options = ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::exponential_buckets(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.options = ::std::option::Option::Some(Distribution_BucketOptions_oneof_options::explicit_buckets(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.options {
            match v {
                &Distribution_BucketOptions_oneof_options::linear_buckets(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Distribution_BucketOptions_oneof_options::exponential_buckets(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Distribution_BucketOptions_oneof_options::explicit_buckets(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.options {
            match v {
                &Distribution_BucketOptions_oneof_options::linear_buckets(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Distribution_BucketOptions_oneof_options::exponential_buckets(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Distribution_BucketOptions_oneof_options::explicit_buckets(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Distribution_BucketOptions {
        Distribution_BucketOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Distribution_BucketOptions_Linear>(
                    "linear_buckets",
                    Distribution_BucketOptions::has_linear_buckets,
                    Distribution_BucketOptions::get_linear_buckets,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Distribution_BucketOptions_Exponential>(
                    "exponential_buckets",
                    Distribution_BucketOptions::has_exponential_buckets,
                    Distribution_BucketOptions::get_exponential_buckets,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Distribution_BucketOptions_Explicit>(
                    "explicit_buckets",
                    Distribution_BucketOptions::has_explicit_buckets,
                    Distribution_BucketOptions::get_explicit_buckets,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Distribution_BucketOptions>(
                    "Distribution_BucketOptions",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Distribution_BucketOptions {
        static mut instance: ::protobuf::lazy::Lazy<Distribution_BucketOptions> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Distribution_BucketOptions,
        };
        unsafe {
            instance.get(Distribution_BucketOptions::new)
        }
    }
}

impl ::protobuf::Clear for Distribution_BucketOptions {
    fn clear(&mut self) {
        self.clear_linear_buckets();
        self.clear_exponential_buckets();
        self.clear_explicit_buckets();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Distribution_BucketOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Distribution_BucketOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Distribution_BucketOptions_Linear {
    // message fields
    pub num_finite_buckets: i32,
    pub width: f64,
    pub offset: f64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Distribution_BucketOptions_Linear {
    pub fn new() -> Distribution_BucketOptions_Linear {
        ::std::default::Default::default()
    }

    // int32 num_finite_buckets = 1;

    pub fn clear_num_finite_buckets(&mut self) {
        self.num_finite_buckets = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_finite_buckets(&mut self, v: i32) {
        self.num_finite_buckets = v;
    }

    pub fn get_num_finite_buckets(&self) -> i32 {
        self.num_finite_buckets
    }

    // double width = 2;

    pub fn clear_width(&mut self) {
        self.width = 0.;
    }

    // Param is passed by value, moved
    pub fn set_width(&mut self, v: f64) {
        self.width = v;
    }

    pub fn get_width(&self) -> f64 {
        self.width
    }

    // double offset = 3;

    pub fn clear_offset(&mut self) {
        self.offset = 0.;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: f64) {
        self.offset = v;
    }

    pub fn get_offset(&self) -> f64 {
        self.offset
    }
}

impl ::protobuf::Message for Distribution_BucketOptions_Linear {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.num_finite_buckets = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.width = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.offset = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.num_finite_buckets != 0 {
            my_size += ::protobuf::rt::value_size(1, self.num_finite_buckets, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.width != 0. {
            my_size += 9;
        }
        if self.offset != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.num_finite_buckets != 0 {
            os.write_int32(1, self.num_finite_buckets)?;
        }
        if self.width != 0. {
            os.write_double(2, self.width)?;
        }
        if self.offset != 0. {
            os.write_double(3, self.offset)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Distribution_BucketOptions_Linear {
        Distribution_BucketOptions_Linear::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "num_finite_buckets",
                    |m: &Distribution_BucketOptions_Linear| { &m.num_finite_buckets },
                    |m: &mut Distribution_BucketOptions_Linear| { &mut m.num_finite_buckets },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "width",
                    |m: &Distribution_BucketOptions_Linear| { &m.width },
                    |m: &mut Distribution_BucketOptions_Linear| { &mut m.width },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "offset",
                    |m: &Distribution_BucketOptions_Linear| { &m.offset },
                    |m: &mut Distribution_BucketOptions_Linear| { &mut m.offset },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Distribution_BucketOptions_Linear>(
                    "Distribution_BucketOptions_Linear",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Distribution_BucketOptions_Linear {
        static mut instance: ::protobuf::lazy::Lazy<Distribution_BucketOptions_Linear> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Distribution_BucketOptions_Linear,
        };
        unsafe {
            instance.get(Distribution_BucketOptions_Linear::new)
        }
    }
}

impl ::protobuf::Clear for Distribution_BucketOptions_Linear {
    fn clear(&mut self) {
        self.clear_num_finite_buckets();
        self.clear_width();
        self.clear_offset();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Distribution_BucketOptions_Linear {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Distribution_BucketOptions_Linear {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Distribution_BucketOptions_Exponential {
    // message fields
    pub num_finite_buckets: i32,
    pub growth_factor: f64,
    pub scale: f64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Distribution_BucketOptions_Exponential {
    pub fn new() -> Distribution_BucketOptions_Exponential {
        ::std::default::Default::default()
    }

    // int32 num_finite_buckets = 1;

    pub fn clear_num_finite_buckets(&mut self) {
        self.num_finite_buckets = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_finite_buckets(&mut self, v: i32) {
        self.num_finite_buckets = v;
    }

    pub fn get_num_finite_buckets(&self) -> i32 {
        self.num_finite_buckets
    }

    // double growth_factor = 2;

    pub fn clear_growth_factor(&mut self) {
        self.growth_factor = 0.;
    }

    // Param is passed by value, moved
    pub fn set_growth_factor(&mut self, v: f64) {
        self.growth_factor = v;
    }

    pub fn get_growth_factor(&self) -> f64 {
        self.growth_factor
    }

    // double scale = 3;

    pub fn clear_scale(&mut self) {
        self.scale = 0.;
    }

    // Param is passed by value, moved
    pub fn set_scale(&mut self, v: f64) {
        self.scale = v;
    }

    pub fn get_scale(&self) -> f64 {
        self.scale
    }
}

impl ::protobuf::Message for Distribution_BucketOptions_Exponential {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.num_finite_buckets = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.growth_factor = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.scale = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.num_finite_buckets != 0 {
            my_size += ::protobuf::rt::value_size(1, self.num_finite_buckets, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.growth_factor != 0. {
            my_size += 9;
        }
        if self.scale != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.num_finite_buckets != 0 {
            os.write_int32(1, self.num_finite_buckets)?;
        }
        if self.growth_factor != 0. {
            os.write_double(2, self.growth_factor)?;
        }
        if self.scale != 0. {
            os.write_double(3, self.scale)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Distribution_BucketOptions_Exponential {
        Distribution_BucketOptions_Exponential::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "num_finite_buckets",
                    |m: &Distribution_BucketOptions_Exponential| { &m.num_finite_buckets },
                    |m: &mut Distribution_BucketOptions_Exponential| { &mut m.num_finite_buckets },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "growth_factor",
                    |m: &Distribution_BucketOptions_Exponential| { &m.growth_factor },
                    |m: &mut Distribution_BucketOptions_Exponential| { &mut m.growth_factor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "scale",
                    |m: &Distribution_BucketOptions_Exponential| { &m.scale },
                    |m: &mut Distribution_BucketOptions_Exponential| { &mut m.scale },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Distribution_BucketOptions_Exponential>(
                    "Distribution_BucketOptions_Exponential",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Distribution_BucketOptions_Exponential {
        static mut instance: ::protobuf::lazy::Lazy<Distribution_BucketOptions_Exponential> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Distribution_BucketOptions_Exponential,
        };
        unsafe {
            instance.get(Distribution_BucketOptions_Exponential::new)
        }
    }
}

impl ::protobuf::Clear for Distribution_BucketOptions_Exponential {
    fn clear(&mut self) {
        self.clear_num_finite_buckets();
        self.clear_growth_factor();
        self.clear_scale();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Distribution_BucketOptions_Exponential {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Distribution_BucketOptions_Exponential {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Distribution_BucketOptions_Explicit {
    // message fields
    pub bounds: ::std::vec::Vec<f64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Distribution_BucketOptions_Explicit {
    pub fn new() -> Distribution_BucketOptions_Explicit {
        ::std::default::Default::default()
    }

    // repeated double bounds = 1;

    pub fn clear_bounds(&mut self) {
        self.bounds.clear();
    }

    // Param is passed by value, moved
    pub fn set_bounds(&mut self, v: ::std::vec::Vec<f64>) {
        self.bounds = v;
    }

    // Mutable pointer to the field.
    pub fn mut_bounds(&mut self) -> &mut ::std::vec::Vec<f64> {
        &mut self.bounds
    }

    // Take field
    pub fn take_bounds(&mut self) -> ::std::vec::Vec<f64> {
        ::std::mem::replace(&mut self.bounds, ::std::vec::Vec::new())
    }

    pub fn get_bounds(&self) -> &[f64] {
        &self.bounds
    }
}

impl ::protobuf::Message for Distribution_BucketOptions_Explicit {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_double_into(wire_type, is, &mut self.bounds)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += 9 * self.bounds.len() as u32;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.bounds {
            os.write_double(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Distribution_BucketOptions_Explicit {
        Distribution_BucketOptions_Explicit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "bounds",
                    |m: &Distribution_BucketOptions_Explicit| { &m.bounds },
                    |m: &mut Distribution_BucketOptions_Explicit| { &mut m.bounds },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Distribution_BucketOptions_Explicit>(
                    "Distribution_BucketOptions_Explicit",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Distribution_BucketOptions_Explicit {
        static mut instance: ::protobuf::lazy::Lazy<Distribution_BucketOptions_Explicit> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Distribution_BucketOptions_Explicit,
        };
        unsafe {
            instance.get(Distribution_BucketOptions_Explicit::new)
        }
    }
}

impl ::protobuf::Clear for Distribution_BucketOptions_Explicit {
    fn clear(&mut self) {
        self.clear_bounds();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Distribution_BucketOptions_Explicit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Distribution_BucketOptions_Explicit {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dgoogle/api/distribution.proto\x12\ngoogle.api\x1a\x1cgoogle/api/an\
    notations.proto\x1a\x19google/protobuf/any.proto\x1a\x1fgoogle/protobuf/\
    timestamp.proto\"\x84\x07\n\x0cDistribution\x12\x14\n\x05count\x18\x01\
    \x20\x01(\x03R\x05count\x12\x12\n\x04mean\x18\x02\x20\x01(\x01R\x04mean\
    \x127\n\x18sum_of_squared_deviation\x18\x03\x20\x01(\x01R\x15sumOfSquare\
    dDeviation\x124\n\x05range\x18\x04\x20\x01(\x0b2\x1e.google.api.Distribu\
    tion.RangeR\x05range\x12M\n\x0ebucket_options\x18\x06\x20\x01(\x0b2&.goo\
    gle.api.Distribution.BucketOptionsR\rbucketOptions\x12#\n\rbucket_counts\
    \x18\x07\x20\x03(\x03R\x0cbucketCounts\x1a+\n\x05Range\x12\x10\n\x03min\
    \x18\x01\x20\x01(\x01R\x03min\x12\x10\n\x03max\x18\x02\x20\x01(\x01R\x03\
    max\x1a\xb9\x04\n\rBucketOptions\x12V\n\x0elinear_buckets\x18\x01\x20\
    \x01(\x0b2-.google.api.Distribution.BucketOptions.LinearH\0R\rlinearBuck\
    ets\x12e\n\x13exponential_buckets\x18\x02\x20\x01(\x0b22.google.api.Dist\
    ribution.BucketOptions.ExponentialH\0R\x12exponentialBuckets\x12\\\n\x10\
    explicit_buckets\x18\x03\x20\x01(\x0b2/.google.api.Distribution.BucketOp\
    tions.ExplicitH\0R\x0fexplicitBuckets\x1ad\n\x06Linear\x12,\n\x12num_fin\
    ite_buckets\x18\x01\x20\x01(\x05R\x10numFiniteBuckets\x12\x14\n\x05width\
    \x18\x02\x20\x01(\x01R\x05width\x12\x16\n\x06offset\x18\x03\x20\x01(\x01\
    R\x06offset\x1av\n\x0bExponential\x12,\n\x12num_finite_buckets\x18\x01\
    \x20\x01(\x05R\x10numFiniteBuckets\x12#\n\rgrowth_factor\x18\x02\x20\x01\
    (\x01R\x0cgrowthFactor\x12\x14\n\x05scale\x18\x03\x20\x01(\x01R\x05scale\
    \x1a\"\n\x08Explicit\x12\x16\n\x06bounds\x18\x01\x20\x03(\x01R\x06bounds\
    B\t\n\x07optionsBj\n\x0ecom.google.apiB\x11DistributionProtoP\x01ZCgoogl\
    e.golang.org/genproto/googleapis/api/distribution;distributionJ\x9a<\n\
    \x07\x12\x05\x0e\0\xb8\x01\x01\n\xbd\x04\n\x01\x0c\x12\x03\x0e\0\x122\
    \xb2\x04\x20Copyright\x202016\x20Google\x20Inc.\n\n\x20Licensed\x20under\
    \x20the\x20Apache\x20License,\x20Version\x202.0\x20(the\x20\"License\");\
    \n\x20you\x20may\x20not\x20use\x20this\x20file\x20except\x20in\x20compli\
    ance\x20with\x20the\x20License.\n\x20You\x20may\x20obtain\x20a\x20copy\
    \x20of\x20the\x20License\x20at\n\n\x20\x20\x20\x20\x20http://www.apache.\
    org/licenses/LICENSE-2.0\n\n\x20Unless\x20required\x20by\x20applicable\
    \x20law\x20or\x20agreed\x20to\x20in\x20writing,\x20software\n\x20distrib\
    uted\x20under\x20the\x20License\x20is\x20distributed\x20on\x20an\x20\"AS\
    \x20IS\"\x20BASIS,\n\x20WITHOUT\x20WARRANTIES\x20OR\x20CONDITIONS\x20OF\
    \x20ANY\x20KIND,\x20either\x20express\x20or\x20implied.\n\x20See\x20the\
    \x20License\x20for\x20the\x20specific\x20language\x20governing\x20permis\
    sions\x20and\n\x20limitations\x20under\x20the\x20License.\n\n\x08\n\x01\
    \x02\x12\x03\x10\x08\x12\n\t\n\x02\x03\0\x12\x03\x12\x07%\n\t\n\x02\x03\
    \x01\x12\x03\x13\x07\"\n\t\n\x02\x03\x02\x12\x03\x14\x07(\n\x08\n\x01\
    \x08\x12\x03\x16\0Z\n\x0b\n\x04\x08\xe7\x07\0\x12\x03\x16\0Z\n\x0c\n\x05\
    \x08\xe7\x07\0\x02\x12\x03\x16\x07\x11\n\r\n\x06\x08\xe7\x07\0\x02\0\x12\
    \x03\x16\x07\x11\n\x0e\n\x07\x08\xe7\x07\0\x02\0\x01\x12\x03\x16\x07\x11\
    \n\x0c\n\x05\x08\xe7\x07\0\x07\x12\x03\x16\x14Y\n\x08\n\x01\x08\x12\x03\
    \x17\0\"\n\x0b\n\x04\x08\xe7\x07\x01\x12\x03\x17\0\"\n\x0c\n\x05\x08\xe7\
    \x07\x01\x02\x12\x03\x17\x07\x1a\n\r\n\x06\x08\xe7\x07\x01\x02\0\x12\x03\
    \x17\x07\x1a\n\x0e\n\x07\x08\xe7\x07\x01\x02\0\x01\x12\x03\x17\x07\x1a\n\
    \x0c\n\x05\x08\xe7\x07\x01\x03\x12\x03\x17\x1d!\n\x08\n\x01\x08\x12\x03\
    \x18\02\n\x0b\n\x04\x08\xe7\x07\x02\x12\x03\x18\02\n\x0c\n\x05\x08\xe7\
    \x07\x02\x02\x12\x03\x18\x07\x1b\n\r\n\x06\x08\xe7\x07\x02\x02\0\x12\x03\
    \x18\x07\x1b\n\x0e\n\x07\x08\xe7\x07\x02\x02\0\x01\x12\x03\x18\x07\x1b\n\
    \x0c\n\x05\x08\xe7\x07\x02\x07\x12\x03\x18\x1e1\n\x08\n\x01\x08\x12\x03\
    \x19\0'\n\x0b\n\x04\x08\xe7\x07\x03\x12\x03\x19\0'\n\x0c\n\x05\x08\xe7\
    \x07\x03\x02\x12\x03\x19\x07\x13\n\r\n\x06\x08\xe7\x07\x03\x02\0\x12\x03\
    \x19\x07\x13\n\x0e\n\x07\x08\xe7\x07\x03\x02\0\x01\x12\x03\x19\x07\x13\n\
    \x0c\n\x05\x08\xe7\x07\x03\x07\x12\x03\x19\x16&\n\xf1\x06\n\x02\x04\0\
    \x12\x05+\0\xb8\x01\x01\x1a\xe3\x06\x20Distribution\x20contains\x20summa\
    ry\x20statistics\x20for\x20a\x20population\x20of\x20values\x20and,\n\x20\
    optionally,\x20a\x20histogram\x20representing\x20the\x20distribution\x20\
    of\x20those\x20values\x20across\n\x20a\x20specified\x20set\x20of\x20hist\
    ogram\x20buckets.\n\n\x20The\x20summary\x20statistics\x20are\x20the\x20c\
    ount,\x20mean,\x20sum\x20of\x20the\x20squared\x20deviation\x20from\n\x20\
    the\x20mean,\x20the\x20minimum,\x20and\x20the\x20maximum\x20of\x20the\
    \x20set\x20of\x20population\x20of\x20values.\n\n\x20The\x20histogram\x20\
    is\x20based\x20on\x20a\x20sequence\x20of\x20buckets\x20and\x20gives\x20a\
    \x20count\x20of\x20values\n\x20that\x20fall\x20into\x20each\x20bucket.\
    \x20\x20The\x20boundaries\x20of\x20the\x20buckets\x20are\x20given\x20eit\
    her\n\x20explicitly\x20or\x20by\x20specifying\x20parameters\x20for\x20a\
    \x20method\x20of\x20computing\x20them\n\x20(buckets\x20of\x20fixed\x20wi\
    dth\x20or\x20buckets\x20of\x20exponentially\x20increasing\x20width).\n\n\
    \x20Although\x20it\x20is\x20not\x20forbidden,\x20it\x20is\x20generally\
    \x20a\x20bad\x20idea\x20to\x20include\n\x20non-finite\x20values\x20(infi\
    nities\x20or\x20NaNs)\x20in\x20the\x20population\x20of\x20values,\x20as\
    \x20this\n\x20will\x20render\x20the\x20`mean`\x20and\x20`sum_of_squared_\
    deviation`\x20fields\x20meaningless.\n\n\n\n\x03\x04\0\x01\x12\x03+\x08\
    \x14\n3\n\x04\x04\0\x03\0\x12\x04-\x023\x03\x1a%\x20The\x20range\x20of\
    \x20the\x20population\x20values.\n\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03-\
    \n\x0f\n6\n\x06\x04\0\x03\0\x02\0\x12\x03/\x04\x13\x1a'\x20The\x20minimu\
    m\x20of\x20the\x20population\x20values.\n\n\x0f\n\x07\x04\0\x03\0\x02\0\
    \x04\x12\x04/\x04-\x11\n\x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\x03/\x04\n\
    \n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03/\x0b\x0e\n\x0e\n\x07\x04\0\
    \x03\0\x02\0\x03\x12\x03/\x11\x12\n6\n\x06\x04\0\x03\0\x02\x01\x12\x032\
    \x04\x13\x1a'\x20The\x20maximum\x20of\x20the\x20population\x20values.\n\
    \n\x0f\n\x07\x04\0\x03\0\x02\x01\x04\x12\x042\x04/\x13\n\x0e\n\x07\x04\0\
    \x03\0\x02\x01\x05\x12\x032\x04\n\n\x0e\n\x07\x04\0\x03\0\x02\x01\x01\
    \x12\x032\x0b\x0e\n\x0e\n\x07\x04\0\x03\0\x02\x01\x03\x12\x032\x11\x12\n\
    \x89\n\n\x04\x04\0\x03\x01\x12\x05L\x02\x90\x01\x03\x1a\xf9\t\x20A\x20Di\
    stribution\x20may\x20optionally\x20contain\x20a\x20histogram\x20of\x20th\
    e\x20values\x20in\x20the\n\x20population.\x20\x20The\x20histogram\x20is\
    \x20given\x20in\x20`bucket_counts`\x20as\x20counts\x20of\x20values\n\x20\
    that\x20fall\x20into\x20one\x20of\x20a\x20sequence\x20of\x20non-overlapp\
    ing\x20buckets.\x20\x20The\x20sequence\n\x20of\x20buckets\x20is\x20descr\
    ibed\x20by\x20`bucket_options`.\n\n\x20A\x20bucket\x20specifies\x20an\
    \x20inclusive\x20lower\x20bound\x20and\x20exclusive\x20upper\x20bound\
    \x20for\n\x20the\x20values\x20that\x20are\x20counted\x20for\x20that\x20b\
    ucket.\x20\x20The\x20upper\x20bound\x20of\x20a\x20bucket\n\x20is\x20stri\
    ctly\x20greater\x20than\x20the\x20lower\x20bound.\n\n\x20The\x20sequence\
    \x20of\x20N\x20buckets\x20for\x20a\x20Distribution\x20consists\x20of\x20\
    an\x20underflow\n\x20bucket\x20(number\x200),\x20zero\x20or\x20more\x20f\
    inite\x20buckets\x20(number\x201\x20through\x20N\x20-\x202)\x20and\n\x20\
    an\x20overflow\x20bucket\x20(number\x20N\x20-\x201).\x20\x20The\x20bucke\
    ts\x20are\x20contiguous:\x20\x20the\x20lower\n\x20bound\x20of\x20bucket\
    \x20i\x20(i\x20>\x200)\x20is\x20the\x20same\x20as\x20the\x20upper\x20bou\
    nd\x20of\x20bucket\x20i\x20-\x201.\n\x20The\x20buckets\x20span\x20the\
    \x20whole\x20range\x20of\x20finite\x20values:\x20lower\x20bound\x20of\
    \x20the\n\x20underflow\x20bucket\x20is\x20-infinity\x20and\x20the\x20upp\
    er\x20bound\x20of\x20the\x20overflow\x20bucket\x20is\n\x20+infinity.\x20\
    \x20The\x20finite\x20buckets\x20are\x20so-called\x20because\x20both\x20b\
    ounds\x20are\n\x20finite.\n\n\x20`BucketOptions`\x20describes\x20bucket\
    \x20boundaries\x20in\x20one\x20of\x20three\x20ways.\x20\x20Two\n\x20desc\
    ribe\x20the\x20boundaries\x20by\x20giving\x20parameters\x20for\x20a\x20f\
    ormula\x20to\x20generate\n\x20boundaries\x20and\x20one\x20gives\x20the\
    \x20bucket\x20boundaries\x20explicitly.\n\n\x20If\x20`bucket_boundaries`\
    \x20is\x20not\x20given,\x20then\x20no\x20`bucket_counts`\x20may\x20be\
    \x20given.\n\n\x0c\n\x05\x04\0\x03\x01\x01\x12\x03L\n\x17\n\xa0\x03\n\
    \x06\x04\0\x03\x01\x03\0\x12\x04V\x04_\x05\x1a\x8f\x03\x20Specify\x20a\
    \x20sequence\x20of\x20buckets\x20that\x20all\x20have\x20the\x20same\x20w\
    idth\x20(except\n\x20overflow\x20and\x20underflow).\x20\x20Each\x20bucke\
    t\x20represents\x20a\x20constant\x20absolute\n\x20uncertainty\x20on\x20t\
    he\x20specific\x20value\x20in\x20the\x20bucket.\n\n\x20Defines\x20`num_f\
    inite_buckets\x20+\x202`\x20(=\x20N)\x20buckets\x20with\x20these\x20boun\
    daries\x20for\n\x20bucket\x20`i`:\n\n\x20\x20\x20\x20Upper\x20bound\x20(\
    0\x20<=\x20i\x20<\x20N-1):\x20\x20\x20\x20\x20offset\x20+\x20(width\x20*\
    \x20i).\n\x20\x20\x20\x20Lower\x20bound\x20(1\x20<=\x20i\x20<\x20N):\x20\
    \x20\x20\x20\x20\x20\x20offset\x20+\x20(width\x20*\x20(i\x20-\x201)).\n\
    \n\x0e\n\x07\x04\0\x03\x01\x03\0\x01\x12\x03V\x0c\x12\n*\n\x08\x04\0\x03\
    \x01\x03\0\x02\0\x12\x03X\x06#\x1a\x19\x20Must\x20be\x20greater\x20than\
    \x200.\n\n\x11\n\t\x04\0\x03\x01\x03\0\x02\0\x04\x12\x04X\x06V\x14\n\x10\
    \n\t\x04\0\x03\x01\x03\0\x02\0\x05\x12\x03X\x06\x0b\n\x10\n\t\x04\0\x03\
    \x01\x03\0\x02\0\x01\x12\x03X\x0c\x1e\n\x10\n\t\x04\0\x03\x01\x03\0\x02\
    \0\x03\x12\x03X!\"\n*\n\x08\x04\0\x03\x01\x03\0\x02\x01\x12\x03[\x06\x17\
    \x1a\x19\x20Must\x20be\x20greater\x20than\x200.\n\n\x11\n\t\x04\0\x03\
    \x01\x03\0\x02\x01\x04\x12\x04[\x06X#\n\x10\n\t\x04\0\x03\x01\x03\0\x02\
    \x01\x05\x12\x03[\x06\x0c\n\x10\n\t\x04\0\x03\x01\x03\0\x02\x01\x01\x12\
    \x03[\r\x12\n\x10\n\t\x04\0\x03\x01\x03\0\x02\x01\x03\x12\x03[\x15\x16\n\
    3\n\x08\x04\0\x03\x01\x03\0\x02\x02\x12\x03^\x06\x18\x1a\"\x20Lower\x20b\
    ound\x20of\x20the\x20first\x20bucket.\n\n\x11\n\t\x04\0\x03\x01\x03\0\
    \x02\x02\x04\x12\x04^\x06[\x17\n\x10\n\t\x04\0\x03\x01\x03\0\x02\x02\x05\
    \x12\x03^\x06\x0c\n\x10\n\t\x04\0\x03\x01\x03\0\x02\x02\x01\x12\x03^\r\
    \x13\n\x10\n\t\x04\0\x03\x01\x03\0\x02\x02\x03\x12\x03^\x16\x17\n\xb4\
    \x03\n\x06\x04\0\x03\x01\x03\x01\x12\x04j\x04s\x05\x1a\xa3\x03\x20Specif\
    y\x20a\x20sequence\x20of\x20buckets\x20that\x20have\x20a\x20width\x20tha\
    t\x20is\x20proportional\x20to\n\x20the\x20value\x20of\x20the\x20lower\
    \x20bound.\x20\x20Each\x20bucket\x20represents\x20a\x20constant\x20relat\
    ive\n\x20uncertainty\x20on\x20a\x20specific\x20value\x20in\x20the\x20buc\
    ket.\n\n\x20Defines\x20`num_finite_buckets\x20+\x202`\x20(=\x20N)\x20buc\
    kets\x20with\x20these\x20boundaries\x20for\n\x20bucket\x20i:\n\n\x20\x20\
    \x20\x20Upper\x20bound\x20(0\x20<=\x20i\x20<\x20N-1):\x20\x20\x20\x20\
    \x20scale\x20*\x20(growth_factor\x20^\x20i).\n\x20\x20\x20\x20Lower\x20b\
    ound\x20(1\x20<=\x20i\x20<\x20N):\x20\x20\x20\x20\x20\x20\x20scale\x20*\
    \x20(growth_factor\x20^\x20(i\x20-\x201)).\n\n\x0e\n\x07\x04\0\x03\x01\
    \x03\x01\x01\x12\x03j\x0c\x17\n*\n\x08\x04\0\x03\x01\x03\x01\x02\0\x12\
    \x03l\x06#\x1a\x19\x20Must\x20be\x20greater\x20than\x200.\n\n\x11\n\t\
    \x04\0\x03\x01\x03\x01\x02\0\x04\x12\x04l\x06j\x19\n\x10\n\t\x04\0\x03\
    \x01\x03\x01\x02\0\x05\x12\x03l\x06\x0b\n\x10\n\t\x04\0\x03\x01\x03\x01\
    \x02\0\x01\x12\x03l\x0c\x1e\n\x10\n\t\x04\0\x03\x01\x03\x01\x02\0\x03\
    \x12\x03l!\"\n*\n\x08\x04\0\x03\x01\x03\x01\x02\x01\x12\x03o\x06\x1f\x1a\
    \x19\x20Must\x20be\x20greater\x20than\x201.\n\n\x11\n\t\x04\0\x03\x01\
    \x03\x01\x02\x01\x04\x12\x04o\x06l#\n\x10\n\t\x04\0\x03\x01\x03\x01\x02\
    \x01\x05\x12\x03o\x06\x0c\n\x10\n\t\x04\0\x03\x01\x03\x01\x02\x01\x01\
    \x12\x03o\r\x1a\n\x10\n\t\x04\0\x03\x01\x03\x01\x02\x01\x03\x12\x03o\x1d\
    \x1e\n*\n\x08\x04\0\x03\x01\x03\x01\x02\x02\x12\x03r\x06\x17\x1a\x19\x20\
    Must\x20be\x20greater\x20than\x200.\n\n\x11\n\t\x04\0\x03\x01\x03\x01\
    \x02\x02\x04\x12\x04r\x06o\x1f\n\x10\n\t\x04\0\x03\x01\x03\x01\x02\x02\
    \x05\x12\x03r\x06\x0c\n\x10\n\t\x04\0\x03\x01\x03\x01\x02\x02\x01\x12\
    \x03r\r\x12\n\x10\n\t\x04\0\x03\x01\x03\x01\x02\x02\x03\x12\x03r\x15\x16\
    \n\xb7\x03\n\x06\x04\0\x03\x01\x03\x02\x12\x06\x80\x01\x04\x83\x01\x05\
    \x1a\xa4\x03\x20A\x20set\x20of\x20buckets\x20with\x20arbitrary\x20widths\
    .\n\n\x20Defines\x20`size(bounds)\x20+\x201`\x20(=\x20N)\x20buckets\x20w\
    ith\x20these\x20boundaries\x20for\n\x20bucket\x20i:\n\n\x20\x20\x20\x20U\
    pper\x20bound\x20(0\x20<=\x20i\x20<\x20N-1):\x20\x20\x20\x20\x20bounds[i\
    ]\n\x20\x20\x20\x20Lower\x20bound\x20(1\x20<=\x20i\x20<\x20N);\x20\x20\
    \x20\x20\x20\x20\x20bounds[i\x20-\x201]\n\n\x20There\x20must\x20be\x20at\
    \x20least\x20one\x20element\x20in\x20`bounds`.\x20\x20If\x20`bounds`\x20\
    has\x20only\x20one\n\x20element,\x20there\x20are\x20no\x20finite\x20buck\
    ets,\x20and\x20that\x20single\x20element\x20is\x20the\n\x20common\x20bou\
    ndary\x20of\x20the\x20overflow\x20and\x20underflow\x20buckets.\n\n\x0f\n\
    \x07\x04\0\x03\x01\x03\x02\x01\x12\x04\x80\x01\x0c\x14\n@\n\x08\x04\0\
    \x03\x01\x03\x02\x02\0\x12\x04\x82\x01\x06!\x1a.\x20The\x20values\x20mus\
    t\x20be\x20monotonically\x20increasing.\n\n\x11\n\t\x04\0\x03\x01\x03\
    \x02\x02\0\x04\x12\x04\x82\x01\x06\x0e\n\x11\n\t\x04\0\x03\x01\x03\x02\
    \x02\0\x05\x12\x04\x82\x01\x0f\x15\n\x11\n\t\x04\0\x03\x01\x03\x02\x02\0\
    \x01\x12\x04\x82\x01\x16\x1c\n\x11\n\t\x04\0\x03\x01\x03\x02\x02\0\x03\
    \x12\x04\x82\x01\x1f\x20\nB\n\x06\x04\0\x03\x01\x08\0\x12\x06\x86\x01\
    \x04\x8f\x01\x05\x1a0\x20Exactly\x20one\x20of\x20these\x20three\x20field\
    s\x20must\x20be\x20set.\n\n\x0f\n\x07\x04\0\x03\x01\x08\0\x01\x12\x04\
    \x86\x01\n\x11\n$\n\x06\x04\0\x03\x01\x02\0\x12\x04\x88\x01\x06\x20\x1a\
    \x14\x20The\x20linear\x20bucket.\n\n\x0f\n\x07\x04\0\x03\x01\x02\0\x06\
    \x12\x04\x88\x01\x06\x0c\n\x0f\n\x07\x04\0\x03\x01\x02\0\x01\x12\x04\x88\
    \x01\r\x1b\n\x0f\n\x07\x04\0\x03\x01\x02\0\x03\x12\x04\x88\x01\x1e\x1f\n\
    *\n\x06\x04\0\x03\x01\x02\x01\x12\x04\x8b\x01\x06*\x1a\x1a\x20The\x20exp\
    onential\x20buckets.\n\n\x0f\n\x07\x04\0\x03\x01\x02\x01\x06\x12\x04\x8b\
    \x01\x06\x11\n\x0f\n\x07\x04\0\x03\x01\x02\x01\x01\x12\x04\x8b\x01\x12%\
    \n\x0f\n\x07\x04\0\x03\x01\x02\x01\x03\x12\x04\x8b\x01()\n'\n\x06\x04\0\
    \x03\x01\x02\x02\x12\x04\x8e\x01\x06$\x1a\x17\x20The\x20explicit\x20buck\
    ets.\n\n\x0f\n\x07\x04\0\x03\x01\x02\x02\x06\x12\x04\x8e\x01\x06\x0e\n\
    \x0f\n\x07\x04\0\x03\x01\x02\x02\x01\x12\x04\x8e\x01\x0f\x1f\n\x0f\n\x07\
    \x04\0\x03\x01\x02\x02\x03\x12\x04\x8e\x01\"#\nM\n\x04\x04\0\x02\0\x12\
    \x04\x93\x01\x02\x12\x1a?\x20The\x20number\x20of\x20values\x20in\x20the\
    \x20population.\x20Must\x20be\x20non-negative.\n\n\x0f\n\x05\x04\0\x02\0\
    \x04\x12\x06\x93\x01\x02\x90\x01\x03\n\r\n\x05\x04\0\x02\0\x05\x12\x04\
    \x93\x01\x02\x07\n\r\n\x05\x04\0\x02\0\x01\x12\x04\x93\x01\x08\r\n\r\n\
    \x05\x04\0\x02\0\x03\x12\x04\x93\x01\x10\x11\nv\n\x04\x04\0\x02\x01\x12\
    \x04\x97\x01\x02\x12\x1ah\x20The\x20arithmetic\x20mean\x20of\x20the\x20v\
    alues\x20in\x20the\x20population.\x20If\x20`count`\x20is\x20zero\n\x20th\
    en\x20this\x20field\x20must\x20be\x20zero.\n\n\x0f\n\x05\x04\0\x02\x01\
    \x04\x12\x06\x97\x01\x02\x93\x01\x12\n\r\n\x05\x04\0\x02\x01\x05\x12\x04\
    \x97\x01\x02\x08\n\r\n\x05\x04\0\x02\x01\x01\x12\x04\x97\x01\t\r\n\r\n\
    \x05\x04\0\x02\x01\x03\x12\x04\x97\x01\x10\x11\n\xd9\x02\n\x04\x04\0\x02\
    \x02\x12\x04\xa2\x01\x02&\x1a\xca\x02\x20The\x20sum\x20of\x20squared\x20\
    deviations\x20from\x20the\x20mean\x20of\x20the\x20values\x20in\x20the\n\
    \x20population.\x20\x20For\x20values\x20x_i\x20this\x20is:\n\n\x20\x20\
    \x20\x20\x20Sum[i=1..n]((x_i\x20-\x20mean)^2)\n\n\x20Knuth,\x20\"The\x20\
    Art\x20of\x20Computer\x20Programming\",\x20Vol.\x202,\x20page\x20323,\
    \x203rd\x20edition\n\x20describes\x20Welford's\x20method\x20for\x20accum\
    ulating\x20this\x20sum\x20in\x20one\x20pass.\n\n\x20If\x20`count`\x20is\
    \x20zero\x20then\x20this\x20field\x20must\x20be\x20zero.\n\n\x0f\n\x05\
    \x04\0\x02\x02\x04\x12\x06\xa2\x01\x02\x97\x01\x12\n\r\n\x05\x04\0\x02\
    \x02\x05\x12\x04\xa2\x01\x02\x08\n\r\n\x05\x04\0\x02\x02\x01\x12\x04\xa2\
    \x01\t!\n\r\n\x05\x04\0\x02\x02\x03\x12\x04\xa2\x01$%\n\x81\x01\n\x04\
    \x04\0\x02\x03\x12\x04\xa6\x01\x02\x12\x1as\x20If\x20specified,\x20conta\
    ins\x20the\x20range\x20of\x20the\x20population\x20values.\x20The\x20fiel\
    d\n\x20must\x20not\x20be\x20present\x20if\x20the\x20`count`\x20is\x20zer\
    o.\n\n\x0f\n\x05\x04\0\x02\x03\x04\x12\x06\xa6\x01\x02\xa2\x01&\n\r\n\
    \x05\x04\0\x02\x03\x06\x12\x04\xa6\x01\x02\x07\n\r\n\x05\x04\0\x02\x03\
    \x01\x12\x04\xa6\x01\x08\r\n\r\n\x05\x04\0\x02\x03\x03\x12\x04\xa6\x01\
    \x10\x11\n8\n\x04\x04\0\x02\x04\x12\x04\xa9\x01\x02#\x1a*\x20Defines\x20\
    the\x20histogram\x20bucket\x20boundaries.\n\n\x0f\n\x05\x04\0\x02\x04\
    \x04\x12\x06\xa9\x01\x02\xa6\x01\x12\n\r\n\x05\x04\0\x02\x04\x06\x12\x04\
    \xa9\x01\x02\x0f\n\r\n\x05\x04\0\x02\x04\x01\x12\x04\xa9\x01\x10\x1e\n\r\
    \n\x05\x04\0\x02\x04\x03\x12\x04\xa9\x01!\"\n\xb6\x04\n\x04\x04\0\x02\
    \x05\x12\x04\xb7\x01\x02#\x1a\xa7\x04\x20If\x20`bucket_options`\x20is\
    \x20given,\x20then\x20the\x20sum\x20of\x20the\x20values\x20in\x20`bucket\
    _counts`\n\x20must\x20equal\x20the\x20value\x20in\x20`count`.\x20\x20If\
    \x20`bucket_options`\x20is\x20not\x20given,\x20no\n\x20`bucket_counts`\
    \x20fields\x20may\x20be\x20given.\n\n\x20Bucket\x20counts\x20are\x20give\
    n\x20in\x20order\x20under\x20the\x20numbering\x20scheme\x20described\n\
    \x20above\x20(the\x20underflow\x20bucket\x20has\x20number\x200;\x20the\
    \x20finite\x20buckets,\x20if\x20any,\n\x20have\x20numbers\x201\x20throug\
    h\x20N-2;\x20the\x20overflow\x20bucket\x20has\x20number\x20N-1).\n\n\x20\
    The\x20size\x20of\x20`bucket_counts`\x20must\x20be\x20no\x20greater\x20t\
    han\x20N\x20as\x20defined\x20in\n\x20`bucket_options`.\n\n\x20Any\x20suf\
    fix\x20of\x20trailing\x20zero\x20bucket_count\x20fields\x20may\x20be\x20\
    omitted.\n\n\r\n\x05\x04\0\x02\x05\x04\x12\x04\xb7\x01\x02\n\n\r\n\x05\
    \x04\0\x02\x05\x05\x12\x04\xb7\x01\x0b\x10\n\r\n\x05\x04\0\x02\x05\x01\
    \x12\x04\xb7\x01\x11\x1e\n\r\n\x05\x04\0\x02\x05\x03\x12\x04\xb7\x01!\"b\
    \x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
